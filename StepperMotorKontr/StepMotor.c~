/*******************************************************
This program was created by the
CodeWizardAVR V3.12 Advanced
Automatic Program Generator
© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 14.11.2015
Author  : 
Company : 
Comments: 


Chip type               : ATmega8
Program type            : Application
AVR Core Clock frequency: 16,000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 256
*******************************************************/

#include <mega8.h>


// Alphanumeric LCD functions
#include <alcd.h>
#include <stdlib.h>
#include "encoder.h"

// Declare your global variables here
char OldStep, OldDir, OldSpeed;  // переменные для хранения предыдущих значений
char Speed[2];

static char x = 0 ;            // переменные для работы с энкодером
unsigned char EncData = 0;


flash unsigned char Step2[]={172,97,180,61,49,47,50,0}; /*  "Шаг=1/2"  */
flash unsigned char Step4[]={172,97,180,61,49,47,52,0};   /* "Шаг=1/4"  */
flash unsigned char rDir[]={72,97,190,112,97,179,187,101,189,184,101,32,62,62,62,0};  /* "Направление >>>" */
flash unsigned char lDir[]={72,97,190,112,97,179,187,101,189,184,101,32,60,60,60,0};  /* "Направление <<<" */
flash unsigned char mSpd[]={128,67,186,111,112,46,61,0}; /* "Скор.=" */




// значения для управления драйверов ШД
// в режиме 1/4 шага
const unsigned char msteps16[16] = { 
 0b00000011,                         
 0b00000010,   
 0b00001001,
 0b00010000, 
 0b00011000,
 0b00110000,
 0b00101001, 
 0b00100010,
 0b00100011, 
 0b00100110,
 0b00101101,
 0b00110100,  
 0b00011100,
 0b00010100,
 0b00001101,  
 0b00000110};
                   
// значения для управления драйверов ШД 
// в режиме 1/2 шага
const unsigned char msteps8[8] = {  
 0b00000011,                        
 0b00001001,
 0b00011000,
 0b00101001, 
 0b00100011, 
 0b00101101, 
 0b00011100,
 0b00001101};     
 
// значения начальной установки таймера TIM1 
// для задания разных скоростей
const unsigned int mspeed[10] = {  
 0xFACB,  // 1500 шагов в секунду
 0xFB1E,  // 1600
 0xFB68,  // 1700
 0xFBA9,  // 1800
 0xFBE3,  // 1900
 0xFC18,  // 2000
 0xFC48,  // 2100
 0xFC73,  // 2200 
 0xFC9A,  // 2300
 0xFCBF   // 2400
}; 

// Объявления функций
void LcdOut( char, char, char);
void Step(char);

// Timer 0 overflow interrupt service routine
interrupt [TIM0_OVF] void timer0_ovf_isr(void)
{
    // Reinitialize Timer 0 value
    TCNT0=0x83;

    // Place your code here 
    // опрос энкодера
    ENC_PollEncoder();  
    
}

// Timer1 overflow interrupt service routine
interrupt [TIM1_OVF] void timer1_ovf_isr(void)
{
    // Reinitialize Timer1 value
    TCNT1H=mspeed[EncData] >> 8;
    TCNT1L=mspeed[EncData] & 0xff; 
    
    // Place your code here
    //вывод управляющей последовательности на доайвер ШД
    //в режиме шага зависящего от состояния кнопки
    if (PINB.2) {
                Step(1);
            }
            else  {
                Step(-1);    
            };

}



// функция для вывода значений на LCD
void LcdOut(char Dir, char NStp, char Spd)
{
    lcd_clear(); 
    if (NStp) {
            //lcd_putsf("Step=1/2");
            lcd_putsf(Step2);  
         }
         else  {
            //lcd_putsf("Step=1/4");
            lcd_putsf(Step4);   
    };  
    itoa(Spd+1,Speed); 
    //lcd_putsf(" Speed=");  
    #pragma rl+
    lcd_putsf(mSpd);
    lcd_puts(Speed); 
    #pragma rl-
    lcd_gotoxy(0,1); 
    if (Dir) {
            //lcd_putsf(" Direction >>>");
            lcd_putsf(rDir);
         }
         else  {
            //lcd_putsf(" Direction <<<");
            lcd_putsf(lDir);    
    }; 
   
}

// функция для вывода управляющих последовательностей
// в порт упавления драйверов ШД
void Step(char Dir)
{
    if (PINB.3) {
        x = (8 + x + Dir) & 7;
        PORTD = msteps8[x];    
    }
    else  {
        x = (16 + x + Dir) & 15;
        PORTD = msteps16[x];
        
    };

}


void main(void)
{
// Declare your local variables here
ENC_InitEncoder();
// Input/Output Ports initialization
// Port B initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In 
DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
// State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=P Bit2=P Bit1=P Bit0=P 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);

// Port C initialization
// Function: Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
// State: Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 250,000 kHz
TCCR0=(0<<CS02) | (1<<CS01) | (1<<CS00);
TCNT0=0x83;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 2000,000 kHz
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer Period: 5 ms
// Timer1 Overflow Interrupt: On
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
TCNT1H=mspeed[EncData] >> 8;
TCNT1L=mspeed[EncData] & 0xff;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0<<AS2;
TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
TCNT2=0x00;
OCR2=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (1<<TOIE0);

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);

// USART initialization
// USART disabled
UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
SFIOR=(0<<ACME);

// ADC initialization
// ADC disabled
ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Alphanumeric LCD initialization
// Connections are specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTC Bit 0
// RD - PORTB Bit 4
// EN - PORTC Bit 1
// D4 - PORTC Bit 2
// D5 - PORTC Bit 3
// D6 - PORTC Bit 4
// D7 - PORTC Bit 5
// Characters/line: 16
lcd_init(16);

// Вывод на индикатор начальных состояний кнопок и скорости
LcdOut(PINB.2, PINB.3, EncData);

// Global enable interrupts
#asm("sei")

while (1)
      {
      // Place your code here 
        //считываем содержимое буфера энкодера
          //после считывания он очищается
          unsigned char stateEnc = ENC_GetStateEncoder();

          //если не пустой
          if (stateEnc != 0){
               //определяем направление вращения и изменяем переменную timerValue
               if (stateEnc == RIGHT_SPIN){ 
                 if (EncData == MAX_ENC_VALUE) EncData = MIN_ENC_VALUE;
                 else EncData++;  
               }
              if (stateEnc == LEFT_SPIN) {
                  if (EncData == MIN_ENC_VALUE) EncData = MAX_ENC_VALUE;
                  else EncData--;  
               }
          }
          
         // проверка не изменялись ли состояния кнопок и энкодера
         if ((PINB.2 != OldDir) || (PINB.3 != OldStep)||(EncData != OldSpeed)) {
            
             // присвоения переменным текущих состояний кнопок и энкодера      
             OldDir = PINB.2;
             OldStep = PINB.3;
             OldSpeed = EncData;
                
             // вывод на LCD состояний кнопок и энкодера
             LcdOut(PINB.2, PINB.3, EncData);
            
         }; 

      }
}

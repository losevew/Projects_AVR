;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 14.11.2015
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <stdlib.h>
;#include "encoder.h"
;
;// Declare your global variables here
;char OldStep, OldDir, OldSpeed;  // переменные для хранения предыдущих значений
;char Speed[2];
;
;static char x = 0 ;            // переменные для работы с энкодером
;unsigned char EncData = 0;
;
;
;flash unsigned char Step2[]={172,97,180,61,49,47,50,0}; /*  "Шаг=1/2"  */
;flash unsigned char Step4[]={172,97,180,61,49,47,52,0};   /* "Шаг=1/4"  */
;flash unsigned char rDir[]={72,97,190,112,97,179,187,101,189,184,101,32,62,62,62,0};  /* "Направление >>>" */
;flash unsigned char lDir[]={72,97,190,112,97,179,187,101,189,184,101,32,60,60,60,0};  /* "Направление <<<" */
;flash unsigned char mSpd[]={128,67,186,111,112,46,61,0}; /* "Скор.=" */
;
;
;
;
;// значения для управления драйверов ШД
;// в режиме 1/4 шага
;const unsigned char msteps16[16] = {
; 0b00000011,
; 0b00000010,
; 0b00001001,
; 0b00010000,
; 0b00011000,
; 0b00110000,
; 0b00101001,
; 0b00100010,
; 0b00100011,
; 0b00100110,
; 0b00101101,
; 0b00110100,
; 0b00011100,
; 0b00010100,
; 0b00001101,
; 0b00000110};
;
;// значения для управления драйверов ШД
;// в режиме 1/2 шага
;const unsigned char msteps8[8] = {
; 0b00000011,
; 0b00001001,
; 0b00011000,
; 0b00101001,
; 0b00100011,
; 0b00101101,
; 0b00011100,
; 0b00001101};
;
;// значения начальной установки таймера TIM1
;// для задания разных скоростей
;const unsigned int mspeed[10] = {
; 0xFACB,  // 1500 шагов в секунду
; 0xFB1E,  // 1600
; 0xFB68,  // 1700
; 0xFBA9,  // 1800
; 0xFBE3,  // 1900
; 0xFC18,  // 2000
; 0xFC48,  // 2100
; 0xFC73,  // 2200
; 0xFC9A,  // 2300
; 0xFCBF   // 2400
;};
;
;// Объявления функций
;void LcdOut( char, char, char);
;void Step(char);
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0066 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0067     // Reinitialize Timer 0 value
; 0000 0068     TCNT0=0x83;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0069 
; 0000 006A     // Place your code here
; 0000 006B     // опрос энкодера
; 0000 006C     ENC_PollEncoder();
;PCODE: $00000011 VOL: 0
; 0000 006D 
; 0000 006E }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0072 {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0073     // Reinitialize Timer1 value
; 0000 0074     TCNT1H=mspeed[EncData] >> 8;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0075     TCNT1L=mspeed[EncData] & 0xff;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0076 
; 0000 0077     // Place your code here
; 0000 0078     //вывод управляющей последовательности на доайвер ШД
; 0000 0079     //в режиме шага зависящего от состояния кнопки
; 0000 007A     if (PINB.2) {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 007B                 Step(1);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 007C             }
; 0000 007D             else  {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 007E                 Step(-1);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 007F             };
;PCODE: $00000030 VOL: 0
; 0000 0080 
; 0000 0081 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;
;
;// функция для вывода значений на LCD
;void LcdOut(char Dir, char NStp, char Spd)
; 0000 0087 {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0088     lcd_clear();
;PCODE: $00000036 VOL: 0
;	Dir -> Y+2
;	NStp -> Y+1
;	Spd -> Y+0
;PCODE: $00000037 VOL: 0
; 0000 0089     if (NStp) {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 008A             //lcd_putsf("Step=1/2");
; 0000 008B             lcd_putsf(Step2);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 008C          }
; 0000 008D          else  {
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 008E             //lcd_putsf("Step=1/4");
; 0000 008F             lcd_putsf(Step4);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0090     };
;PCODE: $00000041 VOL: 0
; 0000 0091     itoa(Spd+1,Speed);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0092     //lcd_putsf(" Speed=");
; 0000 0093     #pragma rl+
; 0000 0094     lcd_putsf(mSpd);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0095     lcd_puts(Speed);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0096     #pragma rl-
; 0000 0097     lcd_gotoxy(0,1);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0098     if (Dir) {
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0099             //lcd_putsf(" Direction >>>");
; 0000 009A             lcd_putsf(rDir);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 009B          }
; 0000 009C          else  {
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 009D             //lcd_putsf(" Direction <<<");
; 0000 009E             lcd_putsf(lDir);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 009F     };
;PCODE: $00000059 VOL: 0
; 0000 00A0 
; 0000 00A1 }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;
;// функция для вывода управляющих последовательностей
;// в порт упавления драйверов ШД
;void Step(char Dir)
; 0000 00A6 {
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00A7     if (PINB.3) {
;PCODE: $0000005F VOL: 0
;	Dir -> Y+0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00A8         x = (8 + x + Dir) & 7;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00A9         PORTD = msteps8[x];
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00AA     }
; 0000 00AB     else  {
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00AC         x = (16 + x + Dir) & 15;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00AD         PORTD = msteps16[x];
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00AE 
; 0000 00AF     };
;PCODE: $0000007D VOL: 0
; 0000 00B0 
; 0000 00B1 }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;
;
;void main(void)
; 0000 00B5 {
;PCODE: $00000081 VOL: 0
; 0000 00B6 // Declare your local variables here
; 0000 00B7 ENC_InitEncoder();
;PCODE: $00000082 VOL: 0
; 0000 00B8 // Input/Output Ports initialization
; 0000 00B9 // Port B initialization
; 0000 00BA // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00BB DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00BC // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 00BD PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00BE 
; 0000 00BF // Port C initialization
; 0000 00C0 // Function: Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00C1 DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00C2 // State: Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 00C3 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00C4 
; 0000 00C5 // Port D initialization
; 0000 00C6 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00C7 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00C8 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 00C9 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00CA 
; 0000 00CB // Timer/Counter 0 initialization
; 0000 00CC // Clock source: System Clock
; 0000 00CD // Clock value: 250,000 kHz
; 0000 00CE TCCR0=(0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00CF TCNT0=0x83;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00D0 
; 0000 00D1 // Timer/Counter 1 initialization
; 0000 00D2 // Clock source: System Clock
; 0000 00D3 // Clock value: 2000,000 kHz
; 0000 00D4 // Mode: Normal top=0xFFFF
; 0000 00D5 // OC1A output: Disconnected
; 0000 00D6 // OC1B output: Disconnected
; 0000 00D7 // Noise Canceler: Off
; 0000 00D8 // Input Capture on Falling Edge
; 0000 00D9 // Timer Period: 5 ms
; 0000 00DA // Timer1 Overflow Interrupt: On
; 0000 00DB // Input Capture Interrupt: Off
; 0000 00DC // Compare A Match Interrupt: Off
; 0000 00DD // Compare B Match Interrupt: Off
; 0000 00DE TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00DF TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00E0 TCNT1H=mspeed[EncData] >> 8;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00E1 TCNT1L=mspeed[EncData] & 0xff;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00E2 ICR1H=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00E3 ICR1L=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00E4 OCR1AH=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00E5 OCR1AL=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00E6 OCR1BH=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00E7 OCR1BL=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00E8 
; 0000 00E9 // Timer/Counter 2 initialization
; 0000 00EA // Clock source: System Clock
; 0000 00EB // Clock value: Timer2 Stopped
; 0000 00EC // Mode: Normal top=0xFF
; 0000 00ED // OC2 output: Disconnected
; 0000 00EE ASSR=0<<AS2;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00EF TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00F0 TCNT2=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00F1 OCR2=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00F2 
; 0000 00F3 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00F4 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (1<<TOIE0);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00F5 
; 0000 00F6 // External Interrupt(s) initialization
; 0000 00F7 // INT0: Off
; 0000 00F8 // INT1: Off
; 0000 00F9 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00FA 
; 0000 00FB // USART initialization
; 0000 00FC // USART disabled
; 0000 00FD UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00FE 
; 0000 00FF // Analog Comparator initialization
; 0000 0100 // Analog Comparator: Off
; 0000 0101 // The Analog Comparator's positive input is
; 0000 0102 // connected to the AIN0 pin
; 0000 0103 // The Analog Comparator's negative input is
; 0000 0104 // connected to the AIN1 pin
; 0000 0105 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0106 SFIOR=(0<<ACME);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0107 
; 0000 0108 // ADC initialization
; 0000 0109 // ADC disabled
; 0000 010A ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 010B 
; 0000 010C // SPI initialization
; 0000 010D // SPI disabled
; 0000 010E SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 010F 
; 0000 0110 // TWI initialization
; 0000 0111 // TWI disabled
; 0000 0112 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0113 
; 0000 0114 // Alphanumeric LCD initialization
; 0000 0115 // Connections are specified in the
; 0000 0116 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0117 // RS - PORTC Bit 0
; 0000 0118 // RD - PORTB Bit 4
; 0000 0119 // EN - PORTC Bit 1
; 0000 011A // D4 - PORTC Bit 2
; 0000 011B // D5 - PORTC Bit 3
; 0000 011C // D6 - PORTC Bit 4
; 0000 011D // D7 - PORTC Bit 5
; 0000 011E // Characters/line: 16
; 0000 011F lcd_init(16);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0120 
; 0000 0121 // Вывод на индикатор начальных состояний кнопок и скорости
; 0000 0122 LcdOut(PINB.2, PINB.3, EncData);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0123 
; 0000 0124 // Global enable interrupts
; 0000 0125 #asm("sei")
;PCODE: $000000D5 VOL: 0
	sei
;PCODE: $000000D6 VOL: 0
; 0000 0126 
; 0000 0127 while (1)
;PCODE: $000000D7 VOL: 0
; 0000 0128       {
; 0000 0129       // Place your code here
; 0000 012A         //считываем содержимое буфера энкодера
; 0000 012B           //после считывания он очищается
; 0000 012C           unsigned char stateEnc = ENC_GetStateEncoder();
; 0000 012D 
; 0000 012E           //если не пустой
; 0000 012F           if (stateEnc != 0){
;PCODE: $000000D8 VOL: 0
;	stateEnc -> Y+0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0130                //определяем направление вращения и изменяем переменную timerValue
; 0000 0131                if (stateEnc == RIGHT_SPIN){
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0132                  if (EncData == MAX_ENC_VALUE) EncData = MIN_ENC_VALUE;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0133                  else EncData++;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0134                }
;PCODE: $000000E8 VOL: 0
; 0000 0135               if (stateEnc == LEFT_SPIN) {
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0136                   if (EncData == MIN_ENC_VALUE) EncData = MAX_ENC_VALUE;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0137                   else EncData--;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0138                }
;PCODE: $000000F4 VOL: 0
; 0000 0139           }
;PCODE: $000000F5 VOL: 0
; 0000 013A 
; 0000 013B          // проверка не изменялись ли состояния кнопок и энкодера
; 0000 013C          if ((PINB.2 != OldDir) || (PINB.3 != OldStep)||(EncData != OldSpeed)) {
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 013D 
; 0000 013E              // присвоения переменным текущих состояний кнопок и энкодера
; 0000 013F              OldDir = PINB.2;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0140              OldStep = PINB.3;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0141              OldSpeed = EncData;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0142 
; 0000 0143              // вывод на LCD состояний кнопок и энкодера
; 0000 0144              LcdOut(PINB.2, PINB.3, EncData);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0145 
; 0000 0146          };
;PCODE: $0000011A VOL: 0
; 0000 0147 
; 0000 0148       }
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0149 }
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0

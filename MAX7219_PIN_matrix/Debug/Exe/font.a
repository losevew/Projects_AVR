;//------------------------------------------------------------------------------
;// This is Open source software. You can place this code on your site, but don't
;// forget a link to my YouTube-channel: https://www.youtube.com/channel/UChButpZaL5kUUl_zTyIDFkQ
;// Это программное обеспечение распространяется свободно. Вы можете размещать
;// его на вашем сайте, но не забудьте указать ссылку на мой YouTube-канал
;// "Электроника в объектике" https://www.youtube.com/channel/UChButpZaL5kUUl_zTyIDFkQ
;// Автор: Надыршин Руслан / Nadyrshin Ruslan
;//------------------------------------------------------------------------------
;#include "font.h"
;#include "f6x8m.h"
;#include <stdio.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;#include <stdarg.h>
;#include <string.h>
;
;
;// Текущий шрифт для вывода текста
;uint8_t FontID = FONTID_6X8M;
;
;// Таблица с указателями на функции извлечения таблицы символа шрифта. Шрифт пока один
;const t_font_getchar font_table_funcs[] =
;{
;  f6x8_GetCharTable
;};
;
;
;//==============================================================================
;// Процедура меняет шрифт
;//==============================================================================
;void font_ChangeFont(uint8_t NewFont)
; 0005 001F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0005 0020   FontID = NewFont;
;PCODE: $0000000F VOL: 0
;	NewFont -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0005 0021 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;//==============================================================================
;
;
;//==============================================================================
;// Функция возвращает ширину символа Char в пикселях
;//==============================================================================
;uint8_t font_GetCharWidth(uint8_t Char)
; 0005 0029 {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0005 002A   uint8_t *pCharTable = font_table_funcs[FontID](Char);
; 0005 002B   return *pCharTable;  // Ширина символа
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;	Char -> Y+2
;	*pCharTable -> R16,R17
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0005 002C }
;PCODE: $00000029 VOL: 0
;//==============================================================================
;
;const uint8_t Table[] = {
;   f6x8_MONO_WIDTH,
;   f6x8_MONO_HEIGHT,
;   ________,
;   ________,
;   X__X____,
;   X_X_X___,
;   XXX_X___,
;   X_X_X___,
;   X__X____,
;   ________};
;
;//==============================================================================
;// Функция вывода символа Char в буфер из набора байт
;// 1 байт буфера = 1 столбец монохромного индикатора
;// Возвращает кол-во использованных столбцов, 0 - если не хватило длины буфера (BuffLen)
;//==============================================================================
;uint8_t font_DrawChar(uint8_t Char, uint8_t *pColumnBuff, uint16_t BuffLen)
; 0005 0041 {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0005 0042   // Указатель на подтабличку конкретного символа шрифта
; 0005 0043   uint8_t *pCharTable = font_table_funcs[FontID](Char);
; 0005 0044   uint8_t CharWidth = *(pCharTable++);  // Ширина символа
; 0005 0045   uint8_t CharHeight = *(pCharTable++); // Высота символа
; 0005 0046   uint8_t col;
; 0005 0047   uint8_t row;
; 0005 0048 
; 0005 0049   if (CharWidth > BuffLen)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;	Char -> Y+10
;	*pColumnBuff -> Y+8
;	BuffLen -> Y+6
;	*pCharTable -> R16,R17
;	CharWidth -> R19
;	CharHeight -> R18
;	col -> R21
;	row -> R20
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0005 004A     return 0;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0005 004B   for (col = 0; col < CharWidth; col++)
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0005 004C   {
; 0005 004D     uint8_t ColBuff = 0;
; 0005 004E 
; 0005 004F     for (row = 0; row < CharHeight; row++)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;	Char -> Y+11
;	*pColumnBuff -> Y+9
;	BuffLen -> Y+7
;	ColBuff -> Y+0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0005 0050     {
; 0005 0051       if (pCharTable[row] & (1 << (7 - col)))
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0005 0052         ColBuff |= (1 << row);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0005 0053     }
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0005 0054 
; 0005 0055     *pColumnBuff = ColBuff;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0005 0056     pColumnBuff++;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0005 0057   }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0005 0058 
; 0005 0059   return CharWidth;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0005 005A }
;PCODE: $0000008D VOL: 0
;//==============================================================================
;
;
;//==============================================================================
;// Функция вывода текста из строки Str в буфер из набора байт
;// 1 байт буфера = 1 столбец монохромного индикатора
;// Возвращает кол-во использованных столбцов, 0 - если не хватило длины буфера (BuffLen)
;//==============================================================================
;uint16_t font_DrawString(uint8_t *Str, uint8_t *pColumnBuff, uint16_t BuffLen)
; 0005 0064 {
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0005 0065   uint16_t BuffOffset = 0;
; 0005 0066   uint8_t *StrTemp = Str;
; 0005 0067 
; 0005 0068   // Считаем длину необходимого буфера для размещения всех символов строки
; 0005 0069   while (*StrTemp != '\0')
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;	*Str -> Y+8
;	*pColumnBuff -> Y+6
;	BuffLen -> Y+4
;	BuffOffset -> R16,R17
;	*StrTemp -> R18,R19
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0005 006A   {
; 0005 006B     BuffOffset += font_GetCharWidth(*StrTemp);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0005 006C     StrTemp++;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0005 006D 
; 0005 006E     if (BuffOffset > BuffLen)     // Сформированная строка не уместится в буфере
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0005 006F       return 0;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0005 0070   }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0005 0071 
; 0005 0072   BuffOffset = 0;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0005 0073   StrTemp = Str;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0005 0074 
; 0005 0075   // Считаем длину необходимого буфера для размещения всех символов строки
; 0005 0076   while (*StrTemp != '\0')
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0005 0077   {
; 0005 0078     // Выводим очередной символ
; 0005 0079     uint8_t Width = font_DrawChar(*StrTemp, pColumnBuff, BuffLen - BuffOffset);
; 0005 007A     BuffOffset += Width;
;PCODE: $000000B6 VOL: 0
;	*Str -> Y+9
;	*pColumnBuff -> Y+7
;	BuffLen -> Y+5
;	Width -> Y+0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0005 007B     pColumnBuff += Width;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0005 007C     StrTemp++;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0005 007D   }
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0005 007E 
; 0005 007F   return BuffOffset;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0005 0080 }
;PCODE: $000000D2 VOL: 0
;//==============================================================================
;
;
;//==============================================================================
;// Функция форматированного вывода в буфер из набора байт
;// 1 байт буфера = 1 столбец монохромного индикатора
;// Возвращает кол-во использованных столбцов, 0 - если не хватило длины буфера (BuffLen)
;//==============================================================================
;uint16_t font_printf(uint8_t *pColumnBuff, uint16_t BuffLen, flash char *args, ...)
; 0005 008A {
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0005 008B   char font_Buff[40];
; 0005 008C   char len;
; 0005 008D 
; 0005 008E   va_list ap;
; 0005 008F   va_start(ap, args);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;	*pColumnBuff -> Y+48
;	BuffLen -> Y+46
;	*args -> Y+44
;	font_Buff -> Y+4
;	len -> R17
;	*ap -> R18,R19
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0005 0090   len = vsnprintf(font_Buff, sizeof(font_Buff), args, ap);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0005 0091   va_end(ap);
; 0005 0092 
; 0005 0093   return font_DrawString((uint8_t *)font_Buff, pColumnBuff, BuffLen);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0005 0094 }
;PCODE: $000000F5 VOL: 0
;//==============================================================================

;//------------------------------------------------------------------------------
;// This is Open source software. You can place this code on your site, but don't
;// forget a link to my YouTube-channel: https://www.youtube.com/channel/UChButpZaL5kUUl_zTyIDFkQ
;// Это программное обеспечение распространяется свободно. Вы можете размещать
;// его на вашем сайте, но не забудьте указать ссылку на мой YouTube-канал
;// "Электроника в объектике" https://www.youtube.com/channel/UChButpZaL5kUUl_zTyIDFkQ
;// Автор: Надыршин Руслан / Nadyrshin Ruslan
;//------------------------------------------------------------------------------
;#include "scroll_demo.h"
;#include <delay.h>
;#include "max7219\max7219.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "max7219\ledmatrix.h"
;
;
;//==============================================================================
;// Процедура прокручивает на матрице буфер pBuff (ВЛЕВО/ВПРАВО)
;//==============================================================================
;void demo_ScrollBuff(uint8_t *pBuff, uint16_t ScrollLines, uint8_t RightToLeft)
; 0001 0013 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0014   uint16_t i;
; 0001 0015   uint16_t ScrollIdx = (RightToLeft) ? 0 : ScrollLines - 1;
; 0001 0016 
; 0001 0017   ledmatrix_fill_screenbuff(0x00);  // Очистка буфера кадра
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	*pBuff -> Y+7
;	ScrollLines -> Y+5
;	RightToLeft -> Y+4
;	i -> R16,R17
;	ScrollIdx -> R18,R19
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0018 
; 0001 0019   for (i = 0; i < ScrollLines + (MAX7219_NUM * 8); i++)
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 001A   {
; 0001 001B     if (RightToLeft)    // Прокрутка справа налево
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 001C     {
; 0001 001D       ledmatrix_ScrollLeft();
;PCODE: $0000002C VOL: 0
; 0001 001E 
; 0001 001F       if (i < ScrollLines)
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 0020         ledmatrix_screenbuff[(MAX7219_NUM * 8) - 1] = pBuff[ScrollIdx++];
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0021       else
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0001 0022         ledmatrix_screenbuff[(MAX7219_NUM * 8) - 1] = 0;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 0023     }
;PCODE: $0000003D VOL: 0
; 0001 0024     else                // Прокрутка слева направо
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 0025     {
; 0001 0026       ledmatrix_ScrollRight();
;PCODE: $00000040 VOL: 0
; 0001 0027 
; 0001 0028       if (i < ScrollLines)
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 0029         ledmatrix_screenbuff[0] = pBuff[ScrollIdx--];
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 002A       else
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 002B         ledmatrix_screenbuff[0] = 0;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 002C     }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 002D 
; 0001 002E     ledmatrix_update_from_buff();
;PCODE: $00000051 VOL: 0
; 0001 002F 
; 0001 0030     delay_ms(50);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 0031   }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0001 0032 }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;//==============================================================================

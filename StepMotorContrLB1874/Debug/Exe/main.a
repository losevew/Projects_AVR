;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 06.09.2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Declare your global variables here
;
;static char x = 0 ;
;unsigned char TimerValue = 0x83;
;char StepState, DirState, SpeedState;
;
;const unsigned char mstepsA32[32] = {
; 0b00111100, //0
; 0b00111100, //1
; 0b00111100, //2
; 0b00111000, //3
; 0b00110100, //4
; 0b00110000, //5
; 0b00101100, //6
; 0b00101000, //7
; 0b00100100, //8
; 0b00100000, //9
; 0b00011100, //10
; 0b00011000, //11
; 0b00010100, //12
; 0b00010000, //13
; 0b00001100, //14
; 0b00001000, //15
; 0b00000110, //16
; 0b00001001, //17
; 0b00001101, //18
; 0b00010001, //19
; 0b00010101, //20
; 0b00011001, //21
; 0b00011101, //22
; 0b00100001, //23
; 0b00100101, //24
; 0b00101001, //25
; 0b00101101, //26
; 0b00110001, //27
; 0b00110101, //28
; 0b00111001, //29
; 0b00111101, //30
; 0b00111101};//31
;
;
; // значения для управления драйверов ШД
;// в режиме 1/8 шага фаза B
;
;const unsigned char mstepsB32[32] = {
; 0b00001010, //0
; 0b00001000, //1
; 0b00001100, //2
; 0b00010000, //3
; 0b00010100, //4
; 0b00011000, //5
; 0b00011100, //6
; 0b00100000, //7
; 0b00100100, //8
; 0b00101000, //9
; 0b00101100, //10
; 0b00110000, //11
; 0b00110100, //12
; 0b00111000, //13
; 0b00111100, //14
; 0b00111100, //15
; 0b00111100, //16
; 0b00111100, //17
; 0b00111100, //18
; 0b00111000, //19
; 0b00110100, //20
; 0b00110000, //21
; 0b00101100, //22
; 0b00101000, //23
; 0b00100100, //24
; 0b00100000, //25
; 0b00011100, //26
; 0b00011000, //27
; 0b00010100, //28
; 0b00010000, //29
; 0b00001100, //30
; 0b00001000};//31
;
;
;
; void Step(char);
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0070 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0071 // Reinitialize Timer 0 value
; 0000 0072 TCNT0 = TimerValue;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0073 // Place your code here
; 0000 0074 
; 0000 0075 //вывод управляющей последовательности на доайвер ШД
; 0000 0076     //в режиме шага зависящего от состояния кнопки
; 0000 0077     if (DirState) {
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0078                 Step(1);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0079             }
; 0000 007A             else  {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 007B                 Step(-1);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 007C             };
;PCODE: $00000019 VOL: 0
; 0000 007D 
; 0000 007E }
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;// функция для вывода управляющих последовательностей
;// в порт упавления драйверов ШД
;void Step(char Dir)
; 0000 0083 {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0084     if (StepState) {
;PCODE: $0000001F VOL: 0
;	Dir -> Y+0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0085         x = (32 + x + Dir) & 31;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0086         PORTD = mstepsA32[x];
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0087         PORTC = mstepsB32[x];
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0088     }
; 0000 0089     else  {
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 008A         x = (32 +  x + (2*Dir)) & 31;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 008B         PORTD = mstepsA32[x];
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 008C         PORTC = mstepsB32[x];
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 008D 
; 0000 008E     };
;PCODE: $00000047 VOL: 0
; 0000 008F 
; 0000 0090 }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;
;void main(void)
; 0000 0093 {
;PCODE: $0000004B VOL: 0
; 0000 0094 // Declare your local variables here
; 0000 0095 
; 0000 0096 // Input/Output Ports initialization
; 0000 0097 // Port B initialization
; 0000 0098 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0099 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 009A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=P Bit1=P Bit0=P
; 0000 009B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 009C 
; 0000 009D // Port C initialization
; 0000 009E // Function: Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 009F DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 00A0 // State: Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 00A1 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 00A2 
; 0000 00A3 // Port D initialization
; 0000 00A4 // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00A5 DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 00A6 // State: Bit7=T Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 00A7 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 00A8 
; 0000 00A9 // Timer/Counter 0 initialization
; 0000 00AA // Clock source: System Clock
; 0000 00AB // Clock value: 125,000 kHz
; 0000 00AC TCCR0=(0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 00AD TCNT0=TimerValue;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 00AE 
; 0000 00AF // Timer/Counter 1 initialization
; 0000 00B0 // Clock source: System Clock
; 0000 00B1 // Clock value: Timer1 Stopped
; 0000 00B2 // Mode: Normal top=0xFFFF
; 0000 00B3 // OC1A output: Disconnected
; 0000 00B4 // OC1B output: Disconnected
; 0000 00B5 // Noise Canceler: Off
; 0000 00B6 // Input Capture on Falling Edge
; 0000 00B7 // Timer1 Overflow Interrupt: Off
; 0000 00B8 // Input Capture Interrupt: Off
; 0000 00B9 // Compare A Match Interrupt: Off
; 0000 00BA // Compare B Match Interrupt: Off
; 0000 00BB TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00BC TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 00BD TCNT1H=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00BE TCNT1L=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00BF ICR1H=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00C0 ICR1L=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00C1 OCR1AH=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00C2 OCR1AL=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00C3 OCR1BH=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00C4 OCR1BL=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00C5 
; 0000 00C6 // Timer/Counter 2 initialization
; 0000 00C7 // Clock source: System Clock
; 0000 00C8 // Clock value: Timer2 Stopped
; 0000 00C9 // Mode: Normal top=0xFF
; 0000 00CA // OC2 output: Disconnected
; 0000 00CB ASSR=0<<AS2;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00CC TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00CD TCNT2=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00CE OCR2=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00CF 
; 0000 00D0 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00D1 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00D2 
; 0000 00D3 // External Interrupt(s) initialization
; 0000 00D4 // INT0: Off
; 0000 00D5 // INT1: Off
; 0000 00D6 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00D7 
; 0000 00D8 // USART initialization
; 0000 00D9 // USART disabled
; 0000 00DA UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00DB 
; 0000 00DC // Analog Comparator initialization
; 0000 00DD // Analog Comparator: Off
; 0000 00DE // The Analog Comparator's positive input is
; 0000 00DF // connected to the AIN0 pin
; 0000 00E0 // The Analog Comparator's negative input is
; 0000 00E1 // connected to the AIN1 pin
; 0000 00E2 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00E3 SFIOR=(0<<ACME);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00E4 
; 0000 00E5 // ADC initialization
; 0000 00E6 // ADC disabled
; 0000 00E7 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00E8 
; 0000 00E9 // SPI initialization
; 0000 00EA // SPI disabled
; 0000 00EB SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00EC 
; 0000 00ED // TWI initialization
; 0000 00EE // TWI disabled
; 0000 00EF TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00F0 
; 0000 00F1 StepState = PINB.0;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00F2 DirState = PINB.1;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00F3 SpeedState = PINB.2;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00F4 
; 0000 00F5 // Global enable interrupts
; 0000 00F6 #asm("sei")
;PCODE: $00000091 VOL: 0
	sei
;PCODE: $00000092 VOL: 0
; 0000 00F7 
; 0000 00F8 
; 0000 00F9 while (1)
;PCODE: $00000093 VOL: 0
; 0000 00FA       {
; 0000 00FB       // Place your code here
; 0000 00FC       if ( StepState != PINB.0) {
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00FD          delay_us(250);
;PCODE: $0000009B VOL: 0
; 0000 00FE          StepState = PINB.0;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00FF       }
; 0000 0100 
; 0000 0101       if (DirState != PINB.1) {
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0102          delay_us(250);
;PCODE: $000000A7 VOL: 0
; 0000 0103          DirState = PINB.1;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0104       }
; 0000 0105 
; 0000 0106        if (SpeedState != PINB.2) {
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0107          delay_us(250);
;PCODE: $000000B3 VOL: 0
; 0000 0108          SpeedState = PINB.2;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0109          if (SpeedState) {
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 010A             TimerValue = 0x83;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 010B          }
; 0000 010C          else {
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 010D             TimerValue = 0xC2;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 010E          }
;PCODE: $000000BF VOL: 0
; 0000 010F       }
; 0000 0110 
; 0000 0111       }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0112 }
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0

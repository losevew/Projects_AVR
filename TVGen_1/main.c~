/*******************************************************
This program was created by the
CodeWizardAVR V3.12 Advanced
Automatic Program Generator
© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 16.04.2016
Author  : 
Company : 
Comments: 


Chip type               : ATmega8A
Program type            : Application
AVR Core Clock frequency: 16,000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 256
*******************************************************/

#include <mega8.h>

//Тайминги
#define F_CPU 16000000
#define Timer_WholeLine	F_CPU/15625		         //One PAL line 64us
#define Timer_HalfLine	(Timer_WholeLine/2)-1	     //Half PAL line = 32us
#define Timer_ShortSync (Timer_WholeLine/32)+5	 //2,35us
#define Timer_LongSync	(Timer_ShortSync*15)-6	 //29,65us
#define Timer_NormalSync (Timer_WholeLine/16)+11 //4,7us
#define Timer_MidSync (Timer_WholeLine*15/32)-43 //27.3us
#define Phase_Sync_Const  Timer_WholeLine/500     // поправочная добавка на один выравнивающий импульс

#define Sync OCR1B

// Declare your global variables here

volatile unsigned int synccount;	//  счетчик импульсов синхронизации
volatile long int delta;        // поправочный коэфициент
volatile unsigned char phaselock;

// External Interrupt 0 service routine
interrupt [EXT_INT0] void ext_int0_isr(void)
{
// Place your code here
    if ((synccount < 5)||(synccount > 635)) { 
         
         delta = 0; 
         phaselock = 1;
    }
    else  { 
        phaselock = 0;
        if (synccount <= 55) {  

           delta = (synccount-5) * Phase_Sync_Const  ;
        }
        else  {
            if (synccount <= 585 ) {  
                 
                 OCR1A = Timer_HalfLine;
                 Sync = Timer_MidSync;
		         synccount=1;
                 delta = 0; 
                 phaselock = 1;
            }
            else  {
                
                delta = -((625-(synccount-15)) * Phase_Sync_Const)  ;
            };
        };
        

      
    };


}

// Timer1 output compare B interrupt service routine
interrupt [TIM1_COMPB] void timer1_compb_isr(void)
{
// Place your code here

switch (synccount)
	{
	case 5://++++++++++++++++++++++++++++++++++++++++++++++++++++++++=
            OCR1A = Timer_HalfLine + delta;
			Sync = Timer_ShortSync;
			synccount++;
	break;  
	case 9://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			OCR1A = Timer_WholeLine-1;
			Sync = Timer_NormalSync;
			synccount++;
	break;
	case 314://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			OCR1A = Timer_HalfLine + delta;
			Sync = Timer_ShortSync;
			synccount++;	
	break;
	case 320://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			OCR1A = Timer_HalfLine;
            Sync = Timer_MidSync;
			synccount++;
	break;
	case 325://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			OCR1A = Timer_HalfLine + delta;
            Sync = Timer_ShortSync;
			synccount++;
	break;
	case 330://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			OCR1A = Timer_WholeLine-1;
			Sync = Timer_NormalSync;
			synccount++;
	break;	
	case 635://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		    OCR1A = Timer_HalfLine + delta;
		    Sync = Timer_ShortSync;
		    synccount++;
	break;
	case 640://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		    OCR1A = Timer_HalfLine;
            Sync = Timer_MidSync;
		    synccount=1;
	break;

	default://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	synccount++;
  }

}

void main(void)
{
// Declare your local variables here

// Input/Output Ports initialization
// Port B initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=In Bit0=Out 
DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (0<<DDB1) | (1<<DDB0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=T Bit0=0 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=P Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
TCNT0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 16000,000 kHz
// Mode: Fast PWM top=OCR1A
// OC1A output: Disconnected
// OC1B output: Inverted PWM
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer Period: 0,0625 us
// Output Pulse(s):
// OC1B Period: 0,0625 us
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: On
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (1<<COM1B0) | (1<<WGM11) | (1<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0<<AS2;
TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
TCNT2=0x00;
OCR2=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (1<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);

// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Rising Edge
// INT1: Off
GICR|=(0<<INT1) | (1<<INT0);
MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
GIFR=(0<<INTF1) | (1<<INTF0);

// USART initialization
// USART disabled
UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
SFIOR=(0<<ACME);

// ADC initialization
// ADC disabled
ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Initialize Sync for PAL
synccount = 1;
delta = 0;	
Sync = Timer_MidSync;     	//Начинаем с двух прерываний на строку.
OCR1A = Timer_HalfLine;
phaselock = 0;

// Global enable interrupts
#asm("sei")

while (1)
      {
      // Place your code here 
           if (phaselock) {
               PORTB.0 = 1; 
           }
           else  { 
               PORTB.0 = 0;
           };

      }
}

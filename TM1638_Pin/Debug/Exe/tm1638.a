;/**************************************************************************************
;* tm1638.c
;*
;* TM1638 LED controller with key-scan interface driver for Atmel AVR
;* micro controllers.
;*
;*   Copyright (C) 2015 Michael Williamson. All rights reserved.
;*   Authors: Michael Williamson <mikesmodz@gmail.com>
;*
;* Redistribution and use in source and binary forms, with or without
;* modification, are permitted provided that the following conditions
;* are met:
;*
;* 1. Redistributions of source code must retain the above copyright
;*    notice, this list of conditions and the following disclaimer.
;* 2. Redistributions in binary form must reproduce the above copyright
;*    notice, this list of conditions and the following disclaimer in
;*    the documentation and/or other materials provided with the
;*    distribution.
;*
;* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
;* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
;* COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;* OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
;* AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
;* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
;* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;* POSSIBILITY OF SUCH DAMAGE.
;*
;****************************************************************************/
;
;/****************************************************************************
;* Included Files
;****************************************************************************/
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include "tm1638.h"
;#include "tm1638_fonts.h"
;
;/****************************************************************************
;* Private Function Prototypes
;****************************************************************************/
;static void TM1638_SendCommand(const unsigned char cmd);
;//static void TM1638_SendData(const unsigned char adr, const unsigned char data);
;static void TM1638_SendByte(unsigned char data);
;static unsigned char TM1638_ReceiveByte(void);
;
;/****************************************************************************
;* Private Functions
;****************************************************************************/
;
;//*****************************************************************************
;// Function:     TM1638_SendCommand
;// Called with:  cmd = command to send.
;// Returns:      Nothing.
;// Purpose:      Sends a command to the TM1638.
;//*****************************************************************************
;static void TM1638_SendCommand(const unsigned char cmd)
; 0000 0040 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0041 	TM1638_STROBE_LOW;
;PCODE: $0000000F VOL: 0
;	cmd -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0042 	TM1638_SendByte(cmd);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0043 	TM1638_STROBE_HIGH;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0044 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;//*****************************************************************************
;// Function:     TM1638_SendData
;// Called with:  adr = register address.
;//				 data = data to write.
;// Returns:      Nothing.
;// Purpose:      Sends a data to the TM1638.
;//*****************************************************************************
;void TM1638_SendData(const unsigned char adr, const unsigned char data)
; 0000 004E {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 004F 	TM1638_SendCommand(TM1638_DATA_WRITE_FIX_ADDR);
;PCODE: $0000001B VOL: 0
;	adr -> Y+1
;	data -> Y+0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0050 	TM1638_STROBE_LOW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0051 	TM1638_SendByte(TM1638_ADDR_INSTRUCTION_SET|(adr&0x0F));
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0052 	TM1638_SendByte(data);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0053 	TM1638_STROBE_HIGH;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0054 }
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;
;//*****************************************************************************
;// Function:     TM1638_SendByte
;// Called with:  data = data to write.
;// Returns:      Nothing.
;// Purpose:      Sends a byte to the TM1638.
;//*****************************************************************************
;static void TM1638_SendByte(unsigned char data)
; 0000 005D {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 005E 	unsigned char i = 0;
; 0000 005F 	for (i=0; i<8; i++)
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;	data -> Y+1
;	i -> R17
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0060 	{
; 0000 0061 		TM1638_CLOCK_LOW;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0062 		if (data & 0x01)
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0063 		{
; 0000 0064 			TM1638_DATA_HIGH;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0065 		}
; 0000 0066 		else
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0067 		{
; 0000 0068 			TM1638_DATA_LOW;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0069 		}
;PCODE: $00000046 VOL: 0
; 0000 006A 		data >>= 1;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 006B 		TM1638_CLOCK_HIGH;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 006C 	}
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 006D }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;
;//*****************************************************************************
;// Function:     TM1638_ReceiveByte
;// Called with:  Nothing.
;// Returns:      Byte received.
;// Purpose:      Reads a byte of data from the TM1638.
;//*****************************************************************************
;static unsigned char TM1638_ReceiveByte(void)
; 0000 0076 {
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0077 	unsigned char res = 0;
; 0000 0078 	unsigned char i = 0;
; 0000 0079 
; 0000 007A 	/* Change data pin to input */
; 0000 007B 	TM1638_DIR	&= ~(1 << TM1638_DATA_PIN);
;PCODE: $00000058 VOL: 0
;	res -> R17
;	i -> R16
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 007C 
; 0000 007D 	for (i=0; i<8; i++)
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 007E 	{
; 0000 007F 		TM1638_CLOCK_LOW;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0080 		if (TM1638_PINS & (1 << TM1638_DATA_PIN)) res |= 0x80;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0081 		TM1638_CLOCK_HIGH;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0082 		res >>= 1;
;PCODE: $00000072 VOL: 0
; 0000 0083 	}
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0084 
; 0000 0085 	/* Change data pin back to output */
; 0000 0086 	TM1638_DIR	|= 1 << TM1638_DATA_PIN;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0087 
; 0000 0088 	/* Return result */
; 0000 0089 	return res;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 008A }
;PCODE: $0000007D VOL: 0
;
;/****************************************************************************
;* Public Functions
;****************************************************************************/
;
;//*****************************************************************************
;// Function:     TM1638_Init
;// Called with:  intensity = display intensity 0-7.
;// Returns:      Nothing.
;// Purpose:      Initialises the hardware used by the TM1638.
;//*****************************************************************************
;void TM1638_Init(const unsigned char intensity)
; 0000 0097 {
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0098 	unsigned char i = 0;
; 0000 0099 
; 0000 009A 	/* Initialise clock pin as output */
; 0000 009B 	TM1638_DIR|= 1 << TM1638_CLOCK_PIN;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;	intensity -> Y+1
;	i -> R17
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 009C 
; 0000 009D 	/* Initialise strobe pin as output */
; 0000 009E 	TM1638_DIR|= 1 << TM1638_STROBE_PIN;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 009F 
; 0000 00A0 	/* Initialise data pin as output */
; 0000 00A1 	TM1638_DIR	|= 1 << TM1638_DATA_PIN;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00A2 
; 0000 00A3 	/* Initialise the display */
; 0000 00A4 	TM1638_SendCommand(TM1638_DATA_WRITE_AUTO_ADDR);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00A5 	TM1638_SendCommand(TM1638_DISPLAY_CONTROL_SET|0x08|(intensity&0x07));
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00A6 
; 0000 00A7 	/* Set strobe low */
; 0000 00A8 	TM1638_STROBE_LOW;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00A9 
; 0000 00AA 	/* Send first register address */
; 0000 00AB 	TM1638_SendByte(TM1638_ADDR_INSTRUCTION_SET);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00AC 
; 0000 00AD 	/* Clear all of the registers */
; 0000 00AE 	for (i=0; i<16; i++)
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00AF 	{
; 0000 00B0 		TM1638_SendByte(0x00);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00B1 	}
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00B2 
; 0000 00B3 	/* Set strobe high */
; 0000 00B4 	TM1638_STROBE_HIGH;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00B5 }
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;
;//*****************************************************************************
;// Function:     TM1638_ClearDigits
;// Called with:  Nothing.
;// Returns:      Nothing.
;// Purpose:      Clears all of the digits.
;//*****************************************************************************
;void TM1638_ClearDigits(void)
; 0000 00BE {
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00BF 	unsigned char i = 0;
; 0000 00C0 	for (i=0; i<8; i++)
;PCODE: $000000AE VOL: 0
;	i -> R17
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00C1 	{
; 0000 00C2 		TM1638_SendData(i<<1, 0x00);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00C3 	}
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00C4 }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;
;//*****************************************************************************
;// Function:     TM1638_SetLED
;// Called with:  pos = LED position 0-7.
;//				 colour = LED colour 0x00 (off), 0x01 (red) or
;//				 0x02 (green).
;// Returns:      Nothing.
;// Purpose:      Sets an LED state.
;//*****************************************************************************
;void TM1638_SetLED(const unsigned char pos, const unsigned char colour)
; 0000 00CF {
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00D0 	TM1638_SendData(((pos&0x07)<<1)+1, colour);
;PCODE: $000000C9 VOL: 0
;	pos -> Y+1
;	colour -> Y+0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00D1 }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;
;//*****************************************************************************
;// Function:     TM1638_SetDigit
;// Called with:  pos = digit position 0-7.
;//				 segments = segment data.
;//				 dot = include dot segment.
;// Returns:      Nothing.
;// Purpose:      Sets a digits segments.
;//*****************************************************************************
;void TM1638_SetDigit(const unsigned char pos, const unsigned char segments, unsigned char dot)
; 0000 00DC {
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00DD 	TM1638_SendData((pos&0x07)<<1, segments|(dot?0x80:0));
;PCODE: $000000D6 VOL: 0
;	pos -> Y+2
;	segments -> Y+1
;	dot -> Y+0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00DE }
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;
;//*****************************************************************************
;// Function:     TM1638_SetDisplayDigit
;// Called with:  digit = value to display 0x00-0x0F.
;//				 pos = digit position 0-7.
;//				 dot = include dot segment.
;// Returns:      Nothing.
;// Purpose:      Sets a digits segments.
;//*****************************************************************************
;void TM1638_SetDisplayDigit(const unsigned char digit, const unsigned char pos, unsigned char dot)
; 0000 00E9 {
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00EA 	TM1638_SetDigit(pos, NUMBER_FONT[digit & 0x0F], dot);
;PCODE: $000000ED VOL: 0
;	digit -> Y+2
;	pos -> Y+1
;	dot -> Y+0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00EB }
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;
;//*****************************************************************************
;// Function:     TM1638_ClearDisplayDigit
;// Called with:  pos = digit position 0-7.
;//				 dot = include dot segment.
;// Returns:      Nothing.
;// Purpose:      Sets a digits segments.
;//*****************************************************************************
;void TM1638_ClearDisplayDigit(const unsigned char pos, unsigned char dot)
; 0000 00F5 {
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00F6 	TM1638_SetDigit(pos, 0, dot);
;PCODE: $000000FD VOL: 0
;	pos -> Y+1
;	dot -> Y+0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00F7 }
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;
;//*****************************************************************************
;// Function:     TM1638_GetKeys
;// Called with:  Nothing.
;// Returns:      Key states.
;// Purpose:      Reads all of the button states.
;//*****************************************************************************
;unsigned char TM1638_GetKeys(void)
; 0000 0100 {
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0101 	unsigned char i = 0;
; 0000 0102 	unsigned char res = 0;
; 0000 0103 	unsigned char keys = 0;
; 0000 0104 
; 0000 0105 	/* Set strobe low */
; 0000 0106 	TM1638_STROBE_LOW;
;PCODE: $00000109 VOL: 0
;	i -> R17
;	res -> R16
;	keys -> R19
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0107 
; 0000 0108 	/* Send read scan keys command */
; 0000 0109 	TM1638_SendByte(TM1638_READ_KEY_SCAN_MODE);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 010A 
; 0000 010B 	/* Read four bytes containing the key states */
; 0000 010C 	for (i=0; i<4; i++)
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 010D 	{
; 0000 010E 		/* Get key states byte */
; 0000 010F 		res = TM1638_ReceiveByte();
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0110 
; 0000 0111 		/* All keys are on key scan data input K3 which are bits
; 0000 0112 		   B0 and B4 of the result. See data sheet page 4.
; 0000 0113 		   Read these bits and ignore the rest. */
; 0000 0114 		if (res&0x01) keys |= (0x01<<i);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0115 		if (res&0x10) keys |= (0x01<<(i+4));
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0116 	}
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0117 
; 0000 0118 	/* Set strobe high */
; 0000 0119 	TM1638_STROBE_HIGH;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 011A 
; 0000 011B 	/* Return key states */
; 0000 011C 	return keys;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 011D }
;PCODE: $0000013D VOL: 0

;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 23.02.2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include "tm1638.h"
;
;// Declare your global variables here
;
;static void custom_delay(unsigned int delay);
;
;void main(void)
; 0001 0023 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0001 0024 // Declare your local variables here
; 0001 0025     unsigned char i = 0;
; 0001 0026 	unsigned char keys = 0;
; 0001 0027 	unsigned char flag = 0;
; 0001 0028 
; 0001 0029 // Input/Output Ports initialization
; 0001 002A // Port B initialization
; 0001 002B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 002C DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;	i -> R17
;	keys -> R16
;	flag -> R19
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 002D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 002E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0001 002F 
; 0001 0030 // Port C initialization
; 0001 0031 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0032 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0001 0033 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 0034 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 0035 
; 0001 0036 // Port D initialization
; 0001 0037 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0038 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0001 0039 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 003A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0001 003B 
; 0001 003C // Timer/Counter 0 initialization
; 0001 003D // Clock source: System Clock
; 0001 003E // Clock value: Timer 0 Stopped
; 0001 003F TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0001 0040 TCNT0=0x00;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 0041 
; 0001 0042 // Timer/Counter 1 initialization
; 0001 0043 // Clock source: System Clock
; 0001 0044 // Clock value: Timer1 Stopped
; 0001 0045 // Mode: Normal top=0xFFFF
; 0001 0046 // OC1A output: Disconnected
; 0001 0047 // OC1B output: Disconnected
; 0001 0048 // Noise Canceler: Off
; 0001 0049 // Input Capture on Falling Edge
; 0001 004A // Timer1 Overflow Interrupt: Off
; 0001 004B // Input Capture Interrupt: Off
; 0001 004C // Compare A Match Interrupt: Off
; 0001 004D // Compare B Match Interrupt: Off
; 0001 004E TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 004F TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0001 0050 TCNT1H=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0001 0051 TCNT1L=0x00;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 0052 ICR1H=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0001 0053 ICR1L=0x00;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 0054 OCR1AH=0x00;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 0055 OCR1AL=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 0056 OCR1BH=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 0057 OCR1BL=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0058 
; 0001 0059 // Timer/Counter 2 initialization
; 0001 005A // Clock source: System Clock
; 0001 005B // Clock value: Timer2 Stopped
; 0001 005C // Mode: Normal top=0xFF
; 0001 005D // OC2 output: Disconnected
; 0001 005E ASSR=0<<AS2;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0001 005F TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 0060 TCNT2=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0001 0061 OCR2=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 0062 
; 0001 0063 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0001 0064 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 0065 
; 0001 0066 // External Interrupt(s) initialization
; 0001 0067 // INT0: Off
; 0001 0068 // INT1: Off
; 0001 0069 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 006A 
; 0001 006B // USART initialization
; 0001 006C // USART disabled
; 0001 006D UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0001 006E 
; 0001 006F // Analog Comparator initialization
; 0001 0070 // Analog Comparator: Off
; 0001 0071 // The Analog Comparator's positive input is
; 0001 0072 // connected to the AIN0 pin
; 0001 0073 // The Analog Comparator's negative input is
; 0001 0074 // connected to the AIN1 pin
; 0001 0075 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 0076 SFIOR=(0<<ACME);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0001 0077 
; 0001 0078 // ADC initialization
; 0001 0079 // ADC disabled
; 0001 007A ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 007B 
; 0001 007C // SPI initialization
; 0001 007D // SPI disabled
; 0001 007E SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 007F 
; 0001 0080 // TWI initialization
; 0001 0081 // TWI disabled
; 0001 0082 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0001 0083 
; 0001 0084 
; 0001 0085 
; 0001 0086 
; 0001 0087 	/* Initialise the display */
; 0001 0088 	TM1638_Init(0x07);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 0089 
; 0001 008A 	/* Main loop */
; 0001 008B 
; 0001 008C while (1)
;PCODE: $00000052 VOL: 0
; 0001 008D       {
; 0001 008E       // Place your code here
; 0001 008F       keys = TM1638_GetKeys();
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 0090 		for (i=0;i<8;i++)
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 0091 		{
; 0001 0092 			if (keys & (1<<i))
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 0093             {
; 0001 0094                 TM1638_ClearDisplayDigit(i, 0);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0001 0095             }
; 0001 0096 			else
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0001 0097             {
; 0001 0098                 TM1638_SetDisplayDigit(i+1, i, 0);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0001 0099             }
;PCODE: $00000071 VOL: 0
; 0001 009A 		}
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 009B 		for (i=0;i<8;i++) TM1638_SetLED(i,flag);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0001 009C custom_delay(50);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0001 009D 		flag = !flag;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 009E 
; 0001 009F       }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0001 00A0 }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;
;//*****************************************************************************
;// Function:     	custom_delay
;// Called with:  	delay = delay length.
;// Returns:			nothing.
;// Purpose:      	Peforms a delay * 10 ms delay.
;//*****************************************************************************
;static void custom_delay(unsigned int delay)
; 0001 00A9 {
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0001 00AA 	unsigned int i;
; 0001 00AB 	for(i=0; i<delay; i++) delay_ms(10);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;	delay -> Y+2
;	i -> R16,R17
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0001 00AC }
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;

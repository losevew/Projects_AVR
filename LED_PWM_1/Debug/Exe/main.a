;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 09.07.2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATtiny13A
;AVR Core Clock frequency: 9,600000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 16
;*******************************************************/
;
;#include <tiny13a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;
;// Declare your global variables here
;unsigned char counter = 0;
;unsigned int PWM_step = 0;
;unsigned char R = 0;
;unsigned char G = 66;
;unsigned char B = 66;
;signed char dR = 1;
;signed char dG = 1;
;signed char dB = -1;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0025 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0026 // Reinitialize Timer 0 value
; 0000 0027 TCNT0=0x9F;
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0028 // Place your code here
; 0000 0029 if (counter == 99) {
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002A         counter = 0;
;PCODE: $00000011 VOL: 0
; 0000 002B         PWM_step++;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002C         if (PWM_step == 20) {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002D            PWM_step = 0;
;PCODE: $00000018 VOL: 0
; 0000 002E            R+=dR;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002F            G+=dG;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0030            B+=dB;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0031 
; 0000 0032            if (R == 99) {
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0033              dR = -1;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0034              }
; 0000 0035 
; 0000 0036            if (R == 1) {
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0037              dR = 1;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0038              }
; 0000 0039 
; 0000 003A            if (G == 99) {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003B              dG = -1;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003C              }
; 0000 003D 
; 0000 003E            if (G == 1) {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003F              dG = 1;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0040              }
; 0000 0041 
; 0000 0042            if (B == 95) {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0043             dB = -1;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0044              }
; 0000 0045 
; 0000 0046            if (B == 1) {
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0047             dB = 1;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0048              }
; 0000 0049         }
;PCODE: $00000042 VOL: 0
; 0000 004A     }
;PCODE: $00000043 VOL: 0
; 0000 004B     else  {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 004C         counter++ ;
;PCODE: $00000046 VOL: 0
; 0000 004D     };
;PCODE: $00000047 VOL: 0
; 0000 004E 
; 0000 004F }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;
;void main(void)
; 0000 0052 {
;PCODE: $0000004B VOL: 0
; 0000 0053 // Declare your local variables here
; 0000 0054 
; 0000 0055 // Crystal Oscillator division factor: 1
; 0000 0056 #pragma optsize-
; 0000 0057 CLKPR=(1<<CLKPCE);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0058 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0059 #ifdef _OPTIMIZE_SIZE_
; 0000 005A #pragma optsize+
; 0000 005B #endif
; 0000 005C 
; 0000 005D // Input/Output Ports initialization
; 0000 005E // Port B initialization
; 0000 005F // Function: Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 0060 DDRB=(0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0061 // State: Bit5=0 Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 0062 PORTB=(0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0063 
; 0000 0064 // Timer/Counter 0 initialization
; 0000 0065 // Clock source: System Clock
; 0000 0066 // Clock value: 100,000 kHz
; 0000 0067 // Mode: Normal top=0xFF
; 0000 0068 // OC0A output: Disconnected
; 0000 0069 // OC0B output: Disconnected
; 0000 006A // Timer Period: 0,01 ms
; 0000 006B TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 006C TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 006D TCNT0=0x9F;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 006E OCR0A=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 006F OCR0B=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0070 
; 0000 0071 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0072 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0073 
; 0000 0074 // External Interrupt(s) initialization
; 0000 0075 // INT0: Off
; 0000 0076 // Interrupt on any change on pins PCINT0-5: Off
; 0000 0077 GIMSK=(0<<INT0) | (0<<PCIE);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0078 MCUCR=(0<<ISC01) | (0<<ISC00);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0079 
; 0000 007A // Analog Comparator initialization
; 0000 007B // Analog Comparator: Off
; 0000 007C // The Analog Comparator's positive input is
; 0000 007D // connected to the AIN0 pin
; 0000 007E // The Analog Comparator's negative input is
; 0000 007F // connected to the AIN1 pin
; 0000 0080 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0081 ADCSRB=(0<<ACME);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0082 // Digital input buffer on AIN0: On
; 0000 0083 // Digital input buffer on AIN1: On
; 0000 0084 DIDR0=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0085 
; 0000 0086 // ADC initialization
; 0000 0087 // ADC disabled
; 0000 0088 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0089 
; 0000 008A 
; 0000 008B // Global enable interrupts
; 0000 008C #asm("sei")
;PCODE: $0000006C VOL: 0
	sei
;PCODE: $0000006D VOL: 0
; 0000 008D 
; 0000 008E while (1)
;PCODE: $0000006E VOL: 0
; 0000 008F       {
; 0000 0090       // Place your code here
; 0000 0091       if(counter == 0){
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0092         PORTB |= (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0093 
; 0000 0094       }
; 0000 0095       if(counter == R){
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0096         PORTB &= ~(1<<PORTB0);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0097       }
; 0000 0098       if(counter == G){
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0099         PORTB &= ~(1<<PORTB1);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 009A       }
; 0000 009B       if(counter == B){
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 009C         PORTB &= ~(1<<PORTB2);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 009D       }
; 0000 009E 
; 0000 009F       }
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00A0 }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0

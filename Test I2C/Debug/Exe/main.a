;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 24.05.2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// I2C Bus functions
;#include <i2c.h>
;#include <delay.h>
;
;#define I2C_ADR_PCF8574 (0x27)
;
;// LCD HD44780
;#define LCD_RS  0
;#define LCD_RW  1
;#define LCD_E   2
;#define LCD_BL  3
;#define LCD_D4  4
;#define LCD_D5  5
;#define LCD_D6  6
;#define LCD_D7  7
;
;#define CMD 0 // command
;#define DTA 1 // data
;
;unsigned char btn_flag = 0;
;unsigned char click_flag = 0;
;unsigned char count = 0;
;
;
;static unsigned char  send_PCF8574(unsigned char value, unsigned char mode)
; 0000 0033 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0034     unsigned char LCD_data[2];
; 0000 0035 
; 0000 0036     LCD_data[0]=(value & 0xF0)|(mode<<LCD_RS)|(1<<LCD_E)|(1<<LCD_BL);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	value -> Y+3
;	mode -> Y+2
;	LCD_data -> Y+0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0037     LCD_data[1]=LCD_data[0]&~(1<<LCD_E);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0038 
; 0000 0039     i2c_start();
;PCODE: $0000001A VOL: 0
; 0000 003A     i2c_write(I2C_ADR_PCF8574<<1);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 003B     i2c_write(LCD_data[0]);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 003C     i2c_write(LCD_data[1]);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 003D //    i2c_stop();
; 0000 003E     delay_us(10);
;PCODE: $00000021 VOL: 0
; 0000 003F 
; 0000 0040     LCD_data[0]=(value<<4)|(mode<<LCD_RS)|(1<<LCD_E)|(1<<LCD_BL);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0041     LCD_data[1]=LCD_data[0]&~(1<<LCD_E);;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0042 //    i2c_start();
; 0000 0043 //    i2c_write(I2C_ADR_PCF8574<<1);
; 0000 0044     i2c_write(LCD_data[0]);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0045     i2c_write(LCD_data[1]);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0046     i2c_stop();
;PCODE: $0000002F VOL: 0
; 0000 0047 
; 0000 0048     if (value == 0x01)
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0049         delay_ms(50);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 004A     else
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 004B         delay_us(50);
;PCODE: $00000038 VOL: 0
; 0000 004C 
; 0000 004D     return 0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004E }
;PCODE: $0000003D VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0052 {
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0053 // Reinitialize Timer 0 value
; 0000 0054 TCNT0=0xB2;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0055 
; 0000 0056 // Place your code here
; 0000 0057     if (count == 19)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0058         {
; 0000 0059            btn_flag = 1;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 005A            count = 0;
;PCODE: $00000047 VOL: 0
; 0000 005B            if (click_flag)
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 005C             {
; 0000 005D                 click_flag=0;
;PCODE: $0000004A VOL: 0
; 0000 005E             }
; 0000 005F             else
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0060             {
; 0000 0061                 click_flag=1;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0062             }
;PCODE: $0000004F VOL: 0
; 0000 0063 
; 0000 0064         }
; 0000 0065     count++;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0066 }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;
;
;
;// Declare your global variables here
;
;void main(void)
; 0000 006D {
;PCODE: $00000055 VOL: 0
; 0000 006E // Declare your local variables here
; 0000 006F 
; 0000 0070 // Input/Output Ports initialization
; 0000 0071 // Port B initialization
; 0000 0072 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=In
; 0000 0073 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (0<<DDB0);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0074 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=T
; 0000 0075 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0076 
; 0000 0077 // Port C initialization
; 0000 0078 // Function: Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0079 DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 007A // State: Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007B PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 007C 
; 0000 007D // Port D initialization
; 0000 007E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007F DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0080 // State: Bit7=T Bit6=T Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 0081 PORTD=(0<<PORTD7) | (0<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0082 
; 0000 0083 /// Timer/Counter 0 initialization
; 0000 0084 // Clock source: System Clock
; 0000 0085 // Clock value: 7,813 kHz
; 0000 0086 TCCR0=(1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0087 TCNT0=0xB2;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0088 
; 0000 0089 // Timer/Counter 1 initialization
; 0000 008A // Clock source: System Clock
; 0000 008B // Clock value: 8000,000 kHz
; 0000 008C // Mode: CTC top=OCR1A
; 0000 008D // OC1A output: Toggle on compare match
; 0000 008E // OC1B output: Disconnected
; 0000 008F // Noise Canceler: Off
; 0000 0090 // Input Capture on Falling Edge
; 0000 0091 // Timer Period: 1,1364 ms
; 0000 0092 // Output Pulse(s):
; 0000 0093 // OC1A Period: 2,2728 ms Width: 1,1364 ms
; 0000 0094 // Timer1 Overflow Interrupt: Off
; 0000 0095 // Input Capture Interrupt: Off
; 0000 0096 // Compare A Match Interrupt: Off
; 0000 0097 // Compare B Match Interrupt: Off
; 0000 0098 TCCR1A=(0<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0099 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 009A TCNT1H=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 009B TCNT1L=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 009C ICR1H=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 009D ICR1L=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 009E OCR1AH=0x23;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 009F OCR1AL=0x82;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00A0 OCR1BH=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00A1 OCR1BL=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00A2 
; 0000 00A3 // Timer/Counter 2 initialization
; 0000 00A4 // Clock source: System Clock
; 0000 00A5 // Clock value: Timer2 Stopped
; 0000 00A6 // Mode: Normal top=0xFF
; 0000 00A7 // OC2 output: Disconnected
; 0000 00A8 ASSR=0<<AS2;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00A9 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00AA TCNT2=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00AB OCR2=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00AC 
; 0000 00AD // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00AE TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00AF 
; 0000 00B0 // External Interrupt(s) initialization
; 0000 00B1 // INT0: Off
; 0000 00B2 // INT1: Off
; 0000 00B3 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00B4 
; 0000 00B5 // USART initialization
; 0000 00B6 // USART disabled
; 0000 00B7 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00B8 
; 0000 00B9 // Analog Comparator initialization
; 0000 00BA // Analog Comparator: Off
; 0000 00BB // The Analog Comparator's positive input is
; 0000 00BC // connected to the AIN0 pin
; 0000 00BD // The Analog Comparator's negative input is
; 0000 00BE // connected to the AIN1 pin
; 0000 00BF ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00C0 SFIOR=(0<<ACME);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00C1 
; 0000 00C2 // ADC initialization
; 0000 00C3 // ADC disabled
; 0000 00C4 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00C5 
; 0000 00C6 // SPI initialization
; 0000 00C7 // SPI disabled
; 0000 00C8 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00C9 
; 0000 00CA // TWI initialization
; 0000 00CB // TWI disabled
; 0000 00CC TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00CD 
; 0000 00CE // Bit-Banged I2C Bus initialization
; 0000 00CF // I2C Port: PORTC
; 0000 00D0 // I2C SDA bit: 4
; 0000 00D1 // I2C SCL bit: 5
; 0000 00D2 // Bit Rate: 100 kHz
; 0000 00D3 // Note: I2C settings are specified in the
; 0000 00D4 // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 00D5 i2c_init();
;PCODE: $00000092 VOL: 0
; 0000 00D6 
; 0000 00D7 // Global enable interrupts
; 0000 00D8 #asm("sei")
;PCODE: $00000093 VOL: 0
	sei
;PCODE: $00000094 VOL: 0
; 0000 00D9 
; 0000 00DA while (1)
;PCODE: $00000095 VOL: 0
; 0000 00DB       {
; 0000 00DC       // Place your code here
; 0000 00DD       if (!PIND.0 && btn_flag)
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00DE           {
; 0000 00DF             if (!click_flag)
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00E0             {
; 0000 00E1                 send_PCF8574(0x28,CMD);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00E2                 btn_flag=0;
;PCODE: $000000A5 VOL: 0
; 0000 00E3             }
; 0000 00E4 
; 0000 00E5           }
;PCODE: $000000A6 VOL: 0
; 0000 00E6       }
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00E7 }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0

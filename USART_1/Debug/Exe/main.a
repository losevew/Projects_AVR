;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12.09.2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Graphic Display functions
;#include <glcd.h>
;
;// Font used for displaying text
;// on the graphic display
;#include "font5x7ru.h"
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 4
;unsigned char rx_data[RX_BUFFER_SIZE];
;unsigned char rx_count=0;
;unsigned char FRT = 0;                //флаг повтора передачи
;
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;//передача данных по USART
;void USART_Transmit( unsigned char data)
; 0000 0037     {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0038       //char status;
; 0000 0039       // ждать очистки флага передатчика
; 0000 003A       //status = UCSRA;
; 0000 003B       while (!(UCSRA & DATA_REGISTER_EMPTY));
;PCODE: $0000000F VOL: 0
;	data -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 003C       // загрузить байт данных в буфер и начать передачу
; 0000 003D       UDR = data;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003E     }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;
;//прием данных USART
;void USART_Recive(void)
; 0000 0043     {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0044 
; 0000 0045 
; 0000 0046        if ( (UCSRA & (FRAMING_ERROR | DATA_OVERRUN | PARITY_ERROR)) == 0)
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0047        {
; 0000 0048             rx_count=0;
;PCODE: $00000020 VOL: 0
; 0000 0049 //            rx_data[rx_count]=UDR; //Get first byte to packet
; 0000 004A //            rx_count++;
; 0000 004B             do {			//Receive  packet
;PCODE: $00000021 VOL: 0
; 0000 004C 
; 0000 004D                 while ( !(UCSRA & RX_COMPLETE) );
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 004E                 rx_data[rx_count]=UDR;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 004F 	            rx_count++;
;PCODE: $0000002D VOL: 0
; 0000 0050             } while (rx_count<RX_BUFFER_SIZE);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0051             if (rx_count == RX_BUFFER_SIZE) rx_count=0;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0052          }
;PCODE: $00000038 VOL: 0
; 0000 0053          else
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0054          {
; 0000 0055               glcd_clear();
;PCODE: $0000003B VOL: 0
; 0000 0056               glcd_outtextf("Ошибка приема");    // при наличие ошибок вывести сообщение
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0057 
; 0000 0058          }
;PCODE: $0000003F VOL: 0
; 0000 0059          return;
;PCODE: $00000040 VOL: 0
; 0000 005A 
; 0000 005B     }
;PCODE: $00000041 VOL: 0
;
;
;
;void UART_send_st (const unsigned char *st)
; 0000 0060 {
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0061    while(*st)
;PCODE: $00000044 VOL: 0
;	*st -> Y+0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0062       USART_Transmit(*st++);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0063 }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;
;
;
;void LCD_Out (void)
; 0000 0068 {
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0069      unsigned char i;
; 0000 006A      glcd_clear();
;PCODE: $00000056 VOL: 0
;	i -> R17
;PCODE: $00000057 VOL: 0
; 0000 006B      glcd_outtextf("Проверка USART");
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 006C      glcd_outtextf("Принято: ");
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 006D      for (i = 0; i < RX_BUFFER_SIZE; i++)
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 006E             {
; 0000 006F                 glcd_putchar (rx_data[i]);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0070             }
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0071 }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;
;void main(void)
; 0000 0074 {
;PCODE: $00000074 VOL: 0
; 0000 0075 // Declare your local variables here
; 0000 0076 // Variable used to store graphic display
; 0000 0077 // controller initialization data
; 0000 0078 GLCDINIT_t glcd_init_data;
; 0000 0079 
; 0000 007A 
; 0000 007B 
; 0000 007C // Input/Output Ports initialization
; 0000 007D // Port B initialization
; 0000 007E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007F DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000075 VOL: 0
;	glcd_init_data -> Y+0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0080 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=P
; 0000 0081 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (1<<PORTB0);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0082 
; 0000 0083 // Port C initialization
; 0000 0084 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0085 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0086 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0087 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0088 
; 0000 0089 // Port D initialization
; 0000 008A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 008B DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 008C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 008D PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 008E 
; 0000 008F // Timer/Counter 0 initialization
; 0000 0090 // Clock source: System Clock
; 0000 0091 // Clock value: Timer 0 Stopped
; 0000 0092 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0093 TCNT0=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0094 
; 0000 0095 // Timer/Counter 1 initialization
; 0000 0096 // Clock source: System Clock
; 0000 0097 // Clock value: Timer1 Stopped
; 0000 0098 // Mode: Normal top=0xFFFF
; 0000 0099 // OC1A output: Disconnected
; 0000 009A // OC1B output: Disconnected
; 0000 009B // Noise Canceler: Off
; 0000 009C // Input Capture on Falling Edge
; 0000 009D // Timer1 Overflow Interrupt: Off
; 0000 009E // Input Capture Interrupt: Off
; 0000 009F // Compare A Match Interrupt: Off
; 0000 00A0 // Compare B Match Interrupt: Off
; 0000 00A1 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00A2 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00A3 TCNT1H=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00A4 TCNT1L=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00A5 ICR1H=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00A6 ICR1L=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A7 OCR1AH=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00A8 OCR1AL=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00A9 OCR1BH=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00AA OCR1BL=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00AB 
; 0000 00AC // Timer/Counter 2 initialization
; 0000 00AD // Clock source: System Clock
; 0000 00AE // Clock value: Timer2 Stopped
; 0000 00AF // Mode: Normal top=0xFF
; 0000 00B0 // OC2 output: Disconnected
; 0000 00B1 ASSR=0<<AS2;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00B2 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00B3 TCNT2=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00B4 OCR2=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00B5 
; 0000 00B6 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00B7 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00B8 
; 0000 00B9 // External Interrupt(s) initialization
; 0000 00BA // INT0: Off
; 0000 00BB // INT1: Off
; 0000 00BC MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00BD 
; 0000 00BE // USART initialization
; 0000 00BF // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00C0 // USART Receiver: On
; 0000 00C1 // USART Transmitter: On
; 0000 00C2 // USART Mode: Asynchronous
; 0000 00C3 // USART Baud Rate: 9600
; 0000 00C4 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00C5 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00C6 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00C7 UBRRH=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00C8 UBRRL=0x33;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00C9 
; 0000 00CA // Analog Comparator initialization
; 0000 00CB // Analog Comparator: Off
; 0000 00CC // The Analog Comparator's positive input is
; 0000 00CD // connected to the AIN0 pin
; 0000 00CE // The Analog Comparator's negative input is
; 0000 00CF // connected to the AIN1 pin
; 0000 00D0 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00D1 SFIOR=(0<<ACME);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00D2 
; 0000 00D3 // ADC initialization
; 0000 00D4 // ADC disabled
; 0000 00D5 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00D6 
; 0000 00D7 // SPI initialization
; 0000 00D8 // SPI disabled
; 0000 00D9 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00DA 
; 0000 00DB // TWI initialization
; 0000 00DC // TWI disabled
; 0000 00DD TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00DE 
; 0000 00DF // Graphic Display Controller initialization
; 0000 00E0 // The PCD8544 connections are specified in the
; 0000 00E1 // Project|Configure|C Compiler|Libraries|Graphic Display menu:
; 0000 00E2 // SDIN - PORTC Bit 0
; 0000 00E3 // SCLK - PORTC Bit 1
; 0000 00E4 // D /C - PORTC Bit 2
; 0000 00E5 // /SCE - PORTC Bit 3
; 0000 00E6 // /RES - PORTC Bit 4
; 0000 00E7 
; 0000 00E8 // Specify the current font for displaying text
; 0000 00E9 glcd_init_data.font=font5x7ru;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00EA // No function is used for reading
; 0000 00EB // image data from external memory
; 0000 00EC glcd_init_data.readxmem=NULL;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00ED // No function is used for writing
; 0000 00EE // image data to external memory
; 0000 00EF glcd_init_data.writexmem=NULL;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00F0 // Set the LCD temperature coefficient
; 0000 00F1 glcd_init_data.temp_coef=PCD8544_DEFAULT_TEMP_COEF;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00F2 // Set the LCD bias
; 0000 00F3 glcd_init_data.bias=PCD8544_DEFAULT_BIAS;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00F4 // Set the LCD contrast control voltage VLCD
; 0000 00F5 glcd_init_data.vlcd=PCD8544_DEFAULT_VLCD;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00F6 
; 0000 00F7 glcd_init(&glcd_init_data);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00F8 
; 0000 00F9 glcd_clear();
;PCODE: $000000CE VOL: 0
; 0000 00FA glcd_outtextf("Проверка USART");
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00FB 
; 0000 00FC 
; 0000 00FD 
; 0000 00FE while (1)
;PCODE: $000000D2 VOL: 0
; 0000 00FF       {
; 0000 0100       // Place your code here
; 0000 0101       if(PINB.0!=1)
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0102         {
; 0000 0103             if (FRT == 0)
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0104             {
; 0000 0105                UART_send_st("Hello, World!\n");
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0106                USART_Transmit(13);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0107                FRT = 1;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0108             }
; 0000 0109         }
;PCODE: $000000DF VOL: 0
; 0000 010A         else
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 010B         {
; 0000 010C             FRT = 0;
;PCODE: $000000E2 VOL: 0
; 0000 010D         }
;PCODE: $000000E3 VOL: 0
; 0000 010E 
; 0000 010F         if(UCSRA & RX_COMPLETE)
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0110           {
; 0000 0111 
; 0000 0112             USART_Recive();
;PCODE: $000000E7 VOL: 0
; 0000 0113             LCD_Out();
;PCODE: $000000E8 VOL: 0
; 0000 0114 
; 0000 0115           }
; 0000 0116       }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0117 }
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0

	.DSEG
_0x1A:
	.BYTE 0xF

;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 05.01.2016
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;//#include <mega8.h>
;#include "hd44780.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;
;unsigned char NewState, OldState,  upState, downState;
;int OldVol ;
;int Vol = 127;
;uint8_t Mes0[]={67,186,179,97,182,189,111,99,191,196,0};

	.DSEG
;int MaxVol = 255;
;int MinVol = 0;
;
;void EncoderScan(void);
;void LcdOut (unsigned char);
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0029 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002A     // Reinitialize Timer 0 value
; 0000 002B     TCNT0=0xAD;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002C     // Place your code here
; 0000 002D     EncoderScan();
;PCODE: $00000011 VOL: 0
; 0000 002E 
; 0000 002F }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;void EncoderScan(void)
; 0000 0032 {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0033     NewState = PINB & 0x03;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0034     if (NewState != OldState) {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0035         switch (OldState) {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0036             case 2:
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0037                 {
; 0000 0038                 if (NewState == 3)upState++;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0039                 if (NewState == 0)downState++;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 003A                 break;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003B                 }
; 0000 003C             case 0:
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003D                 {
; 0000 003E                 if (NewState == 2)upState++;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003F                 if (NewState == 1)downState++;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0040                 break;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0041                 }
; 0000 0042             case 1:
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0043                 {
; 0000 0044                 if (NewState == 0)upState++;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0045                 if (NewState == 3)downState++;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0046                 break;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0047                 }
; 0000 0048             case 3:
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0049                 {
; 0000 004A                 if (NewState == 1)upState++;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 004B                 if (NewState == 2)downState++;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 004C                 break;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 004D                 }
; 0000 004E         };
;PCODE: $00000054 VOL: 0
; 0000 004F         OldState = NewState;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0050         if (upState >= 4) {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0051             Vol+=5;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0052             upState = 0;
;PCODE: $0000005D VOL: 0
; 0000 0053         };
;PCODE: $0000005E VOL: 0
; 0000 0054         if (downState >= 4) {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0055             Vol-=5;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0056             downState = 0;
;PCODE: $00000065 VOL: 0
; 0000 0057         };
;PCODE: $00000066 VOL: 0
; 0000 0058 
; 0000 0059     };
;PCODE: $00000067 VOL: 0
; 0000 005A 
; 0000 005B }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;
;
;
;void main(void)
; 0000 0060 {
;PCODE: $0000006A VOL: 0
; 0000 0061 // Declare your local variables here
; 0000 0062 
; 0000 0063 // Input/Output Ports initialization
; 0000 0064 // Port B initialization
; 0000 0065 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 0066 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0067 // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=T Bit1=P Bit0=P
; 0000 0068 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0069 
; 0000 006A // Port C initialization
; 0000 006B // Function: Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 006C DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 006D // State: Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 006E PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 006F 
; 0000 0070 // Port D initialization
; 0000 0071 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0072 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0073 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0074 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0075 
; 0000 0076 // Timer/Counter 0 initialization
; 0000 0077 // Clock source: System Clock
; 0000 0078 // Clock value: Timer 0 Stopped
; 0000 0079 TCCR0=(0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 007A TCNT0=0xAD;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 007B 
; 0000 007C // Timer/Counter 1 initialization
; 0000 007D // Clock source: System Clock
; 0000 007E // Clock value: Timer1 Stopped
; 0000 007F // Mode: Normal top=0xFFFF
; 0000 0080 // OC1A output: Disconnected
; 0000 0081 // OC1B output: Disconnected
; 0000 0082 // Noise Canceler: Off
; 0000 0083 // Input Capture on Falling Edge
; 0000 0084 // Timer1 Overflow Interrupt: Off
; 0000 0085 // Input Capture Interrupt: Off
; 0000 0086 // Compare A Match Interrupt: Off
; 0000 0087 // Compare B Match Interrupt: Off
; 0000 0088 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0089 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 008A TCNT1H=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 008B TCNT1L=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 008C ICR1H=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 008D ICR1L=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 008E OCR1AH=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 008F OCR1AL=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0090 OCR1BH=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0091 OCR1BL=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0092 
; 0000 0093 // Timer/Counter 2 initialization
; 0000 0094 // Clock source: System Clock
; 0000 0095 // Clock value: 125,000 kHz
; 0000 0096 // Mode: Fast PWM top=0xFF
; 0000 0097 // OC2 output: Non-Inverted PWM
; 0000 0098 // Timer Period: 2,048 ms
; 0000 0099 // Output Pulse(s):
; 0000 009A // OC2 Period: 2,048 ms Width: 1,0521 ms
; 0000 009B ASSR=0<<AS2;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 009C TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 009D TCNT2=0x83;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 009E OCR2=Vol;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 009F 
; 0000 00A0 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00A1 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00A2 
; 0000 00A3 // External Interrupt(s) initialization
; 0000 00A4 // INT0: Off
; 0000 00A5 // INT1: Off
; 0000 00A6 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00A7 
; 0000 00A8 // USART initialization
; 0000 00A9 // USART disabled
; 0000 00AA UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00AB 
; 0000 00AC // Analog Comparator initialization
; 0000 00AD // Analog Comparator: Off
; 0000 00AE // The Analog Comparator's positive input is
; 0000 00AF // connected to the AIN0 pin
; 0000 00B0 // The Analog Comparator's negative input is
; 0000 00B1 // connected to the AIN1 pin
; 0000 00B2 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00B3 SFIOR=(0<<ACME);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00B4 
; 0000 00B5 // ADC initialization
; 0000 00B6 // ADC disabled
; 0000 00B7 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00B8 
; 0000 00B9 // SPI initialization
; 0000 00BA // SPI disabled
; 0000 00BB SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00BC 
; 0000 00BD // TWI initialization
; 0000 00BE // TWI disabled
; 0000 00BF TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00C0 
; 0000 00C1 // Alphanumeric LCD initialization
; 0000 00C2 // Connections are specified in the
; 0000 00C3 // RS - PORTC Bit 0
; 0000 00C4 // RD - PORTB Bit 4
; 0000 00C5 // EN - PORTC Bit 1
; 0000 00C6 // D4 - PORTC Bit 2
; 0000 00C7 // D5 - PORTC Bit 3
; 0000 00C8 // D6 - PORTC Bit 4
; 0000 00C9 // D7 - PORTC Bit 5
; 0000 00CA // Characters/line: 16
; 0000 00CB     lcd_init();
;PCODE: $000000A7 VOL: 0
; 0000 00CC 	lcd_puts(Mes0);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00CD 	lcd_clrbar();
;PCODE: $000000AA VOL: 0
; 0000 00CE 	lcd_drawbar(Vol*50/MaxVol);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00CF 	lcd_goto(2,11);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00D0 	lcd_itos(Vol*100/MaxVol);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00D1 	lcd_putc('%');
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00D2 
; 0000 00D3 
; 0000 00D4 // Global enable interrupts
; 0000 00D5 #asm("sei")
;PCODE: $000000C2 VOL: 0
	sei
;PCODE: $000000C3 VOL: 0
; 0000 00D6 
; 0000 00D7 while (1)
;PCODE: $000000C4 VOL: 0
; 0000 00D8       {
; 0000 00D9       // Place your code here
; 0000 00DA       if (Vol > MaxVol) Vol = MaxVol;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00DB 		if (Vol < MinVol) Vol = MinVol;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00DC 		if (Vol != OldVol)
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00DD 		{
; 0000 00DE 				lcd_clrscr();
;PCODE: $000000D4 VOL: 0
; 0000 00DF 				lcd_puts(Mes0);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00E0 				lcd_clrbar();
;PCODE: $000000D7 VOL: 0
; 0000 00E1 				lcd_drawbar(Vol*50/MaxVol);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00E2 				lcd_goto(2,11);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00E3 				lcd_itos(Vol*100/MaxVol);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00E4 				lcd_putc('%');
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00E5 				OldVol = Vol;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00E6                 OCR2=Vol;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00E7 
; 0000 00E8 		}
; 0000 00E9 
; 0000 00EA 
; 0000 00EB       }
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00EC }
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0

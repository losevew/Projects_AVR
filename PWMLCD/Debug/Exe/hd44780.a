;//------------------------------------------------------
;/* File:       Library for HD44780 compatible displays  */
;/* Version:	   v2.01  						 			*/
;/* Author:     GrAnd/www.MakeSystem.net		 			*/
;/* Tested on:  AVR, STM32F10X		 	 	 		 	*/
;/* License:	   GNU LGPLv2.1		 		 	 			*/
;//------------------------------------------------------
;/* Copyright (C)2014 GrAnd. All right reserved 			*/
;//------------------------------------------------------
;
;/*
;	This library is free software; you can redistribute it and/or
;	modify it under the terms of the GNU Lesser General Public
;	License as published by the Free Software Foundation; either
;	version 2.1 of the License, or (at your option) any later version.
;
;	This library is distributed in the hope that it will be useful,
;	but WITHOUT ANY WARRANTY; without even the implied warranty of
;	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
;	Lesser General Public License for more details.
;
;	You should have received a copy of the GNU Lesser General Public
;	License along with this library; if not, write to the Free Software
;	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
;
;Contact information :
;						mail@makesystem.net
;						http://makesystem.net/?page_id=2
;*/
;
;#include "hd44780.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;/*!	\brief	Macro-definitions. */
;#define BIT(n)						(1u << (n))
;#define SET(x,n)           			((x) |= BIT(n))
;#define CLR(x,n)  		  			((x) &= ~BIT(n))
;#define GET(x,n)   		  			(((x) & BIT(n)) ? 1u : 0u)
;
;#define LCD_D7_MASK					0x80u
;#define LCD_D6_MASK					0x40u
;#define LCD_D5_MASK					0x20u
;#define LCD_D4_MASK					0x10u
;#define LCD_D3_MASK					0x08u
;#define LCD_D2_MASK					0x04u
;#define LCD_D1_MASK					0x02u
;#define LCD_D0_MASK					0x01u
;
;#define ENABLE_CYCLE_TIME			1u	/* Minimal value ~ 1us */
;#define AC_UPDATE_TIME				4u	/* Minimal value ~ 4us */
;
;#if (USE_PROGRESS_BAR)
;/*!	\brief	Progress bar definitions. */
;#define CGROM_PROGRESS_BAR_SIZE		6u
;#define FULL_LOAD					5u
;#define EMPTY_LOAD					0u
;#define EMPTY_ROW					0x00u /* xxx00000 */
;
;static const uint8_t progress_bar[CGROM_PROGRESS_BAR_SIZE] = {0x00u,0x10u,0x18u,0x1Cu,0x1Eu,0x1Fu};
;static uint8_t current_bar_pixel;
;static uint8_t current_cell_load;
;
;static void lcd_initbar(void);
;#endif
;
;/*!	\brief	Low-level functions. */
;static void lcd_config(uint8_t param);
;static void lcd_write(uint8_t data);
;static void lcd_strobe(void);
;static void lcd_high(uint8_t data);
;static void lcd_low(uint8_t data);
;static void lcd_10us_delay(volatile uint32_t us);
;static uint32_t lcd_pow10(uint8_t n);
;
;#if (USE_BUSY_FLAG)
;static void lcd_busy_delay(void);
;
;/*!	\brief	*/
;static void lcd_busy_delay(void)
;{
;	uint8_t BusyFlag;
;
;	Set_D7_as_Input(); /* Set D7 as input. */
;	/* When RS = 0 and R/W = 1, the busy flag is output to DB7. */
;	CLR(LCD_RS_OUT, LCD_RS);
;	SET(LCD_RW_OUT, LCD_RW);
;
;	do
;	{/* Note: two cycles are needed for the busy flag check. */
;		/* Read busy flag. */
;		lcd_strobe();
;		/* D7 is used as busy flag. */
;		BusyFlag = GET(LCD_D7_IN, LCD_D7);
;		/* Discard D3. */
;		lcd_strobe();
;		/* Verify the busy flag */
;	}while (BusyFlag);
;
;	CLR(LCD_RW_OUT, LCD_RW);
;	Set_D7_as_Outut(); /* Restore D7 as the output. */
;}
;#endif /* USE_BUSY_FLAG */
;
;/*!	\brief	Creates delay multiples of 10us. */
;static void lcd_10us_delay(volatile uint32_t us)
; 0001 0069 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 006A 	/* Ñonversion to us */
; 0001 006B 	us *= MCU_FREQ_VALUE;
;PCODE: $0000000F VOL: 0
;	us -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0001 006C 	/* Wait */
; 0001 006D 	while (us > 0u)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0001 006E 	{
; 0001 006F 		us--;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 0070 	}
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 0071 }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;/*!	\brief	Initiate the transfer of data/commands to LCD. */
;static void lcd_strobe(void)
; 0001 0075 {/* Low level function. */
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0001 0076 	SET(LCD_E_OUT, LCD_E);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 0077 	lcd_10us_delay(ENABLE_CYCLE_TIME);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 0078 	CLR(LCD_E_OUT, LCD_E);	/* Enable strobe */
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0001 0079 }
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;
;/*!	\brief	Send the msb nibble of the data / command to LCD. */
;static void lcd_high(uint8_t data)
; 0001 007D {/* Low level function. */
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 007E 	if(data & LCD_D7_MASK) SET(LCD_D7_OUT, LCD_D7); else CLR(LCD_D7_OUT, LCD_D7);
;PCODE: $0000002C VOL: 0
;	data -> Y+0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0001 007F 	if(data & LCD_D6_MASK) SET(LCD_D6_OUT, LCD_D6); else CLR(LCD_D6_OUT, LCD_D6);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 0080 	if(data & LCD_D5_MASK) SET(LCD_D5_OUT, LCD_D5); else CLR(LCD_D5_OUT, LCD_D5);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 0081 	if(data & LCD_D4_MASK) SET(LCD_D4_OUT, LCD_D4); else CLR(LCD_D4_OUT, LCD_D4);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 0082 }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;
;/*!	\brief	Send the lsb nibble of the data / command to LCD. */
;static void lcd_low(uint8_t data)
; 0001 0086 {/* Low level function. */
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 0087 	if(data & LCD_D3_MASK) SET(LCD_D7_OUT, LCD_D7); else CLR(LCD_D7_OUT, LCD_D7);
;PCODE: $0000005E VOL: 0
;	data -> Y+0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0001 0088 	if(data & LCD_D2_MASK) SET(LCD_D6_OUT, LCD_D6); else CLR(LCD_D6_OUT, LCD_D6);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0001 0089 	if(data & LCD_D1_MASK) SET(LCD_D5_OUT, LCD_D5); else CLR(LCD_D5_OUT, LCD_D5);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0001 008A 	if(data & LCD_D0_MASK) SET(LCD_D4_OUT, LCD_D4); else CLR(LCD_D4_OUT, LCD_D4);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0001 008B }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;
;/*!	\brief	Send data/commands to the display. */
;static void lcd_write(uint8_t data)
; 0001 008F {/* Low level function. */
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0001 0090 #if (USE_BUSY_FLAG)
; 0001 0091 	/* Write data/commands to LCD. */
; 0001 0092 	CLR(LCD_RW_OUT, LCD_RW);
; 0001 0093 #endif /* USE_BUSY_FLAG */
; 0001 0094 
; 0001 0095 	lcd_high(data);
;PCODE: $00000090 VOL: 0
;	data -> Y+0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0001 0096 	lcd_strobe();
;PCODE: $00000093 VOL: 0
; 0001 0097 	lcd_low(data);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0001 0098 	lcd_strobe();
;PCODE: $00000096 VOL: 0
; 0001 0099 
; 0001 009A 	/* The busy flag must be checked after the 4-bit data has been transferred twice. */
; 0001 009B #if (USE_BUSY_FLAG)
; 0001 009C 	lcd_busy_delay();
; 0001 009D #else
; 0001 009E 	lcd_10us_delay(BUSY_CYCLE_TIME);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 009F #endif /* USE_BUSY_FLAG */
; 0001 00A0 }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;
;/*!	\brief	Initializing by instruction. 4-bit interface initialization. */
;static void lcd_config(uint8_t param)
; 0001 00A4 {/* Low level function. */
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0001 00A5 	/* Send commands to LCD. */
; 0001 00A6 	CLR(LCD_RS_OUT, LCD_RS);
;PCODE: $0000009E VOL: 0
;	param -> Y+0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0001 00A7 #if (USE_BUSY_FLAG)
; 0001 00A8 	/* Write data/commands to LCD. */
; 0001 00A9 	CLR(LCD_RW_OUT, LCD_RW);
; 0001 00AA #endif /* USE_BUSY_FLAG */
; 0001 00AB 
; 0001 00AC 	lcd_10us_delay(4000);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0001 00AD 	lcd_high(param);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0001 00AE 	lcd_strobe();		// Change 8-bit interface to 4-bit interface
;PCODE: $000000A5 VOL: 0
; 0001 00AF 	lcd_10us_delay(BUSY_CYCLE_TIME);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0001 00B0 	lcd_strobe();		/* DB7 to DB4 of the "Function set" instruction is written twice. */
;PCODE: $000000A8 VOL: 0
; 0001 00B1 	lcd_10us_delay(BUSY_CYCLE_TIME);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 00B2 	lcd_low(param);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0001 00B3 	lcd_strobe();		// 4-bit, two lines, 5x8 pixel
;PCODE: $000000AD VOL: 0
; 0001 00B4 	lcd_10us_delay(BUSY_CYCLE_TIME);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0001 00B5 	/* Note: The number of display lines and character font cannot be changed after this point. */
; 0001 00B6 }
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;
;							//-----------------------------//
;							/*         LCDlib API          */
;							//-----------------------------//
;
;/*!	\details	Clear display writes space code 20H into all DDRAM addresses.
; * 				It then sets DDRAM address 0 into the address counter,
; * 				and returns the display to its original status if it was shifted.
; * 				In other words, the display disappears and the cursor
; * 				or blinking goes to the left edge of the display (in the first line if 2 lines are displayed).
; * 				It also sets I/D to 1 (increment mode) in entry mode (S of entry mode does not change). */
;void lcd_clrscr(void)
; 0001 00C3 {
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0001 00C4 	/* Send a command to LCD. */
; 0001 00C5 	CLR(LCD_RS_OUT, LCD_RS);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0001 00C6 	/* Clear screen */
; 0001 00C7 	lcd_write(0x01u);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0001 00C8 	/* Busy delay */
; 0001 00C9 #if (USE_BUSY_FLAG)
; 0001 00CA 	lcd_busy_delay();
; 0001 00CB #else
; 0001 00CC 	lcd_10us_delay(CLRSCR_CYCLE_TIME);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0001 00CD #endif /* USE_BUSY_FLAG */
; 0001 00CE }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;
;/*!	\details	"Return home" sets DDRAM address 0 into the address counter,
; * 				and returns the display to its original status if it was shifted.
; * 				The DDRAM contents do not change.
; * 				The cursor or blinking go to the left edge of the display
; * 				(in the first line if 2 lines are displayed). */
;void lcd_return(void)
; 0001 00D6 {
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0001 00D7 	/* Send a command to LCD. */
; 0001 00D8 	CLR(LCD_RS_OUT, LCD_RS);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0001 00D9 	/* Return home */
; 0001 00DA 	lcd_write(0x02u);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0001 00DB 	/* Busy delay */
; 0001 00DC #if (USE_BUSY_FLAG)
; 0001 00DD 	lcd_busy_delay();
; 0001 00DE #else
; 0001 00DF 	lcd_10us_delay(RETHOME_CYCLE_TIME);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0001 00E0 #endif /* USE_BUSY_FLAG */
; 0001 00E1 }
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;
;/*!	\details	lcd_scroll shifts the display to the right or left without writing or reading display data.
; * 				This function is used to correct or search the display.
; *	\note		The first and second line displays will shift at the same time. */
;void lcd_scroll(uint8_t direction)
; 0001 00E7 {
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0001 00E8 	/* Send a command to LCD. */
; 0001 00E9 	CLR(LCD_RS_OUT, LCD_RS);
;PCODE: $000000C9 VOL: 0
;	direction -> Y+0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0001 00EA 	/* Scroll display */
; 0001 00EB 	switch (direction)
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0001 00EC 	{
; 0001 00ED 	/* To left */
; 0001 00EE 		case LEFT  :
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0001 00EF 			lcd_write(0x18u);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0001 00F0 			break;
;PCODE: $000000D2 VOL: 0
; 0001 00F1 
; 0001 00F2 		/* To right */
; 0001 00F3 		case RIGHT :
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0001 00F4 			lcd_write(0x1Cu);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0001 00F5 			break;
;PCODE: $000000D8 VOL: 0
; 0001 00F6 
; 0001 00F7 		default:
;PCODE: $000000D9 VOL: 0
; 0001 00F8 			/* Ignore this command */
; 0001 00F9 			break;
;PCODE: $000000DA VOL: 0
; 0001 00FA 	}
;PCODE: $000000DB VOL: 0
; 0001 00FB }
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;
;/*!	\details	"Cursor shift" shifts the cursor position to the right or left,
; * 				without writing or reading display data.
; * 				This function is used to correct or search the display.
; * 				In a 2-line display, the cursor moves to the second line
; * 				when it passes the 40th digit of the first line. */
;void cursor_shift(uint8_t direction)
; 0001 0103 {
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 0104 	/* Send a command to LCD. */
; 0001 0105 	CLR(LCD_RS_OUT, LCD_RS);
;PCODE: $000000E1 VOL: 0
;	direction -> Y+0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0001 0106 	/* Shift cursor */
; 0001 0107 	switch (direction)
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0001 0108 	{
; 0001 0109 		/* To left */
; 0001 010A 		case LEFT  :
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0001 010B 			lcd_write(0x10u);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0001 010C 			break;
;PCODE: $000000EA VOL: 0
; 0001 010D 
; 0001 010E 		/* To right */
; 0001 010F 		case RIGHT :
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0001 0110 			lcd_write(0x14u);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0001 0111 			break;
;PCODE: $000000F0 VOL: 0
; 0001 0112 
; 0001 0113 		default:
;PCODE: $000000F1 VOL: 0
; 0001 0114 			/* Ignore this command */
; 0001 0115 			break;
;PCODE: $000000F2 VOL: 0
; 0001 0116 	}
;PCODE: $000000F3 VOL: 0
; 0001 0117 }
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;
;/*!	\details	Go to the specified (DDRAM/CGRAM) memory address.*/
;void lcd_goto(uint8_t line, uint8_t address)
; 0001 011B {
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0001 011C 	/* Send a command to LCD. */
; 0001 011D 	CLR(LCD_RS_OUT, LCD_RS);
;PCODE: $000000F9 VOL: 0
;	line -> Y+1
;	address -> Y+0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0001 011E 	/* Set DDRAM/CGRAM address. */
; 0001 011F 	switch (line)
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0001 0120 	{
; 0001 0121 		/* Set DDRAM address. */
; 0001 0122 		case LCD_1st_LINE: lcd_write(0x80u | START_ADDRESS_1st_LINE | address); break;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0001 0123 		case LCD_2nd_LINE: lcd_write(0x80u | START_ADDRESS_2nd_LINE | address); break;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0001 0124 		case LCD_3rd_LINE: lcd_write(0x80u | START_ADDRESS_3rd_LINE | address); break;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0001 0125 		case LCD_4th_LINE: lcd_write(0x80u | START_ADDRESS_4th_LINE | address); break;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0001 0126 		/* Set CGRAM address. */
; 0001 0127 		case CGRAM : lcd_write(0x40u | address); break;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0001 0128 
; 0001 0129 		default:
;PCODE: $00000125 VOL: 0
; 0001 012A 			/* Ignore this command */
; 0001 012B 			break;
;PCODE: $00000126 VOL: 0
; 0001 012C 	}
;PCODE: $00000127 VOL: 0
; 0001 012D }
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;
;/*!	\details	Change LCD settings. */
;void lcd_setmode(uint8_t param)
; 0001 0131 {
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0001 0132 	/* Send a command to LCD. */
; 0001 0133 	CLR(LCD_RS_OUT, LCD_RS);
;PCODE: $0000012D VOL: 0
;	param -> Y+0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0001 0134 	lcd_write(param);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0001 0135 }
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;
;/*!	\details	Write a single char to the current memory space (DDRAM/CGRAM). */
;void lcd_putc(uint8_t data)
; 0001 0139 {
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0001 013A 	/* Send data to LCD. */
; 0001 013B 	SET(LCD_RS_OUT, LCD_RS);
;PCODE: $00000137 VOL: 0
;	data -> Y+0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0001 013C 	lcd_write(data);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0001 013D 	/* Note:
; 0001 013E 	 * After execution of the CGRAM/DDRAM data write/read instruction, the RAM address counter is incremented
; 0001 013F 	 * or decremented by 1. The RAM address counter is updated after the busy flag turns off.
; 0001 0140 	 * tADD is the time elapsed after the busy flag turns off until the address counter is updated. */
; 0001 0141 	lcd_10us_delay(AC_UPDATE_TIME);	/* Update RAM address counter delay. */
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0001 0142 }
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;
;/*!	\details	Writes ANSI-C string to LCD (DDRAM memory space). */
;void lcd_puts(const uint8_t *str)
; 0001 0146 {
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0001 0147 	/* Send a ANSI-C string to LCD. */
; 0001 0148 	while ('\0' != *str)
;PCODE: $00000143 VOL: 0
;	*str -> Y+0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0001 0149 	{
; 0001 014A #if ( USE_FORMATTED_OUTPUT )
; 0001 014B 		if(('\n' == *str))
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0001 014C 		{/*New line */
; 0001 014D 			lcd_goto(LCD_2nd_LINE, 0u);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0001 014E 		}
; 0001 014F 		else if(('\r' == *str))
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0001 0150 		{/* Return home */
; 0001 0151 			lcd_return();
;PCODE: $00000157 VOL: 0
; 0001 0152 		}
; 0001 0153 		else if(('\t' == *str))
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0001 0154 		{/* Tab space */
; 0001 0155 			uint8_t i;
; 0001 0156 
; 0001 0157 			for(i=0u; i<TAB_SPACE; i++)
;PCODE: $0000015E VOL: 0
;	*str -> Y+1
;	i -> Y+0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0001 0158 			{/* Shift cursor to the right. */
; 0001 0159 				cursor_shift(RIGHT);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0001 015A 			}
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0001 015B 		}
;PCODE: $00000172 VOL: 0
; 0001 015C 		else
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0001 015D #endif
; 0001 015E 		{
; 0001 015F 			/* Display a symbol. */
; 0001 0160 			lcd_putc(*str);
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0001 0161 		}
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0001 0162 		/* Get the next symbol. */
; 0001 0163 		str++;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0001 0164 	}
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0001 0165 }
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;
;/*!	\details	Load the user-defined symbol into the CGRAM memory. */
;void lcd_loadchar(uint8_t* vector, uint8_t position)
; 0001 0169 {
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0001 016A 	uint8_t i;
; 0001 016B 	/* Go to the CGRAM memory space: 0 to 7 */
; 0001 016C 	lcd_goto(CGRAM, (position * FONT_HEIGHT));
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;	*vector -> Y+2
;	position -> Y+1
;	i -> R17
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0001 016D 
; 0001 016E 	for(i = 0u; i < FONT_HEIGHT; i++)
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0001 016F 	{/* Load one row of pixels into the CGRAM register. */
; 0001 0170 		lcd_putc(vector[i]);
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0001 0171 	}
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0001 0172 
; 0001 0173 	/* Return to the DDRAM memory space. */
; 0001 0174 	lcd_goto(LCD_1st_LINE, 0u);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0001 0175 }
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;
;/*!	\details	Load and display the user-defined symbol. */
;void lcd_drawchar( uint8_t* vector,
; 0001 0179 			   	   uint8_t position,
; 0001 017A 			   	   uint8_t line,
; 0001 017B 			   	   uint8_t address )
; 0001 017C {
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0001 017D 	/* Load the user-defined symbol into the CGRAM memory. */
; 0001 017E 	lcd_loadchar(vector, position);
;PCODE: $000001AB VOL: 0
;	*vector -> Y+3
;	position -> Y+2
;	line -> Y+1
;	address -> Y+0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0001 017F 	/* Select LCD position. */
; 0001 0180 	lcd_goto(line, address);
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0001 0181 	/* Display the user-defined symbol. */
; 0001 0182 	lcd_putc(position);
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0001 0183 }
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;
;/*!	\details	Erase a symbol from the left of the cursor. */
;void lcd_backspace(void)
; 0001 0187 {
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0001 0188 	cursor_shift(LEFT);		// Ñäâèãàåì êóðñîð íà îäíó ïîçèöèþ âëåâî
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0001 0189 	lcd_putc(' ');			// Î÷èùàåì, ïîñëå ÷åãî ïðîèñõîäèò àâòîèíêðåìåíò âïðàâî
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0001 018A 	cursor_shift(LEFT);		// Ñäâèãàåì êóðñîð íà îäíó ïîçèöèþ âëåâî
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0001 018B }
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;
;/*!	\brief	Returns 10^n value. */
;static uint32_t lcd_pow10(uint8_t n)
; 0001 018F {
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0001 0190 	uint32_t retval = 1u;
; 0001 0191 
; 0001 0192 	while (n > 0u)
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;	n -> Y+4
;	retval -> Y+0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0001 0193 	{
; 0001 0194 		retval *= 10u;
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0001 0195 		n--;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0001 0196 	}
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0001 0197 
; 0001 0198 	return retval;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0001 0199 }
;PCODE: $000001E0 VOL: 0
;
;/*!	\brief	Display a integer number: +/- 2147483647. */
;void lcd_itos(int32_t value)
; 0001 019D {
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0001 019E 	int32_t i;
; 0001 019F 
; 0001 01A0 	if (value < 0)
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;	value -> Y+4
;	i -> Y+0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0001 01A1 	{
; 0001 01A2 		lcd_putc('-');
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0001 01A3 		value = -value;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0001 01A4 	}
; 0001 01A5 
; 0001 01A6 	i = 1;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0001 01A7 	while ((value / i) > 9)
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0001 01A8 	{
; 0001 01A9 		i *= 10;
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0001 01AA 	}
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0001 01AB 
; 0001 01AC 	lcd_putc(value/i + '0');	/* Display at least one symbol */
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0001 01AD 	i /= 10;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0001 01AE 
; 0001 01AF 	while (i > 0)
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0001 01B0 	{
; 0001 01B1 		lcd_putc('0' + ((value % (i*10)) / i));
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0001 01B2 		i /= 10;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0001 01B3 	}
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0001 01B4 }
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;
;/*!	\brief	Display a floating point number. */
;void lcd_ftos(float value, uint8_t n)
; 0001 01B8 {
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0001 01B9 	if (value < 0.0)
;PCODE: $00000220 VOL: 0
;	value -> Y+1
;	n -> Y+0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0001 01BA 	{
; 0001 01BB 		lcd_putc('-');
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0001 01BC 		value = -value;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0001 01BD 	}
; 0001 01BE 
; 0001 01BF 	lcd_itos((int32_t)value); // Âûâîä öåëîé ÷àñòè
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0001 01C0 
; 0001 01C1 	if (n > 0u)
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0001 01C2 	{
; 0001 01C3 		lcd_putc('.'); // Òî÷êà
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0001 01C4 
; 0001 01C5 		lcd_ntos((uint32_t)(value * (float)lcd_pow10(n)), n); // Âûâîä äðîáíîé ÷àñòè
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0001 01C6 	}
; 0001 01C7 }
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;
;/*!	\brief	Display "n" right digits of "value". */
;void lcd_ntos(uint32_t value, uint8_t n)
; 0001 01CB {
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0001 01CC 	if (n > 0u)
;PCODE: $00000243 VOL: 0
;	value -> Y+1
;	n -> Y+0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0001 01CD 	{
; 0001 01CE 		uint32_t i = lcd_pow10(n - 1u);
; 0001 01CF 
; 0001 01D0 		while (i > 0u)	/* Display at least one symbol */
;PCODE: $00000248 VOL: 0
;	value -> Y+5
;	n -> Y+4
;	i -> Y+0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0001 01D1 		{
; 0001 01D2 			lcd_putc('0' + ((value/i) % 10u));
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0001 01D3 
; 0001 01D4 			i /= 10u;
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0001 01D5 		}
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0001 01D6 	}
;PCODE: $00000260 VOL: 0
; 0001 01D7 }
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;
;#if ( USE_PROGRESS_BAR )
;/*!	\brief	Initialize the progress bar
; * 			(i.e. preload elements of the progress bar into CGRAM and reset all variables). */
;static void lcd_initbar(void)
; 0001 01DD {
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0001 01DE 	uint8_t i, j;
; 0001 01DF 
; 0001 01E0 	for (i = 0u; i < CGROM_PROGRESS_BAR_SIZE; i++)
;PCODE: $00000267 VOL: 0
;	i -> R17
;	j -> R16
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0001 01E1 	{
; 0001 01E2 		lcd_goto(CGRAM, (i * FONT_HEIGHT));
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0001 01E3 
; 0001 01E4 		for (j = 0u; j < FONT_HEIGHT; j++)
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0001 01E5 		{
; 0001 01E6 			if (j < PROGRESS_BAR_HEIGHT)
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0001 01E7 			{
; 0001 01E8 				lcd_putc(progress_bar[i]);
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0001 01E9 			}
; 0001 01EA 			else
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0001 01EB 			{/* Load an empty row of pixels in CGRAM. */
; 0001 01EC 				lcd_putc(EMPTY_ROW);
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0001 01ED 			}
;PCODE: $0000028F VOL: 0
; 0001 01EE 		}
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0001 01EF 	}
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0001 01F0 
; 0001 01F1 	/* Clear the entire bar and initialize all variables. */
; 0001 01F2 	lcd_clrbar();
;PCODE: $0000029A VOL: 0
; 0001 01F3 }
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;
;/*!	\brief	Draw progress bar. */
;void lcd_drawbar(uint8_t next_bar_pixel)
; 0001 01F7 {
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0001 01F8 	/* Go to the current cell position in the progress bar. */
; 0001 01F9 	lcd_goto(PROGRESS_BAR_LINE, (current_bar_pixel / FONT_WIDTH));
;PCODE: $000002A0 VOL: 0
;	next_bar_pixel -> Y+0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0001 01FA 
; 0001 01FB 	if (next_bar_pixel > current_bar_pixel)
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0001 01FC 	{
; 0001 01FD 		/* Increment LCD cursor */
; 0001 01FE 		lcd_setmode(ENTRY_MODE_INC_NO_SHIFT);
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0001 01FF 
; 0001 0200 		/* Prevent the progress bar overflow */
; 0001 0201 		if (next_bar_pixel > PROGRESS_BAR_MAX_LOAD)
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0001 0202 		{
; 0001 0203 			next_bar_pixel = PROGRESS_BAR_MAX_LOAD;
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0001 0204 		}
; 0001 0205 
; 0001 0206 		while (current_bar_pixel != next_bar_pixel)
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0001 0207 		{
; 0001 0208 			/* Go to the next pixel. */
; 0001 0209 			current_bar_pixel++;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0001 020A 			current_cell_load++;
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0001 020B 			/* Display the load of the current cell. */
; 0001 020C 			lcd_putc(current_cell_load);
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0001 020D 
; 0001 020E 			if (current_cell_load < FULL_LOAD)
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0001 020F 			{/* Return the cursor to the current cell. */
; 0001 0210 				cursor_shift(LEFT);
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0001 0211 			}
; 0001 0212 			else
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0001 0213 			{/* Go to the next cell. */
; 0001 0214 				current_cell_load = EMPTY_LOAD;
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0001 0215 			}
;PCODE: $000002CC VOL: 0
; 0001 0216 		}
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0001 0217 	 }
; 0001 0218 #if (USE_REGRESS_BAR)
; 0001 0219 	 else if (next_bar_pixel < current_bar_pixel)
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0001 021A 	 {
; 0001 021B 		 /* Decrement LCD cursor */
; 0001 021C 		lcd_setmode(ENTRY_MODE_DEC_NO_SHIFT);
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0001 021D 
; 0001 021E 		do
;PCODE: $000002D7 VOL: 0
; 0001 021F 		{
; 0001 0220 			if (EMPTY_LOAD == current_cell_load)
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0001 0221 			{/* Go to the next cell. */
; 0001 0222 				cursor_shift(LEFT);
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0001 0223 				current_cell_load = FULL_LOAD;
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0001 0224 			}
; 0001 0225 			/* Go to the next pixel. */
; 0001 0226 			current_bar_pixel--;
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0001 0227 			current_cell_load--;
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0001 0228 			/* Display the load of the current cell. */
; 0001 0229 			lcd_putc(current_cell_load);
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0001 022A 			/* Return the cursor to the current cell. */
; 0001 022B 			cursor_shift(RIGHT);
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0001 022C 		}
; 0001 022D 		while (current_bar_pixel != next_bar_pixel);
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0001 022E 	 }
; 0001 022F #endif /* USE_REGRESS_BAR */
; 0001 0230 	 else
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0001 0231 	 {
; 0001 0232 		 /* Nothing to do. */
; 0001 0233 	 }
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0001 0234 
; 0001 0235 	/* Restore the default entry mode. */
; 0001 0236 	lcd_setmode(DEFAULT_ENTRY_MODE);
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0001 0237 	/* Return home. */
; 0001 0238 	lcd_goto(LCD_1st_LINE, 0u);
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0001 0239 }
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;
;/*!	\brief	Clear the entire progress bar. */
;void lcd_clrbar(void)
; 0001 023D {
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0001 023E 	uint8_t i;
; 0001 023F 	/* Go to the last cell in the progress bar. */
; 0001 0240 	lcd_goto(PROGRESS_BAR_LINE, (PROGRESS_BAR_WIDTH - 1u));
;PCODE: $00000301 VOL: 0
;	i -> R17
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0001 0241 	/* Set the decrement mode. */
; 0001 0242 	lcd_setmode(ENTRY_MODE_DEC_NO_SHIFT);
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0001 0243 
; 0001 0244 	for(i = 0u; i < PROGRESS_BAR_WIDTH; i++)
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0001 0245 	{/* Display the "empty cell" symbol (i.e. clear the LCD cell). */
; 0001 0246 		lcd_putc(EMPTY_LOAD);
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0001 0247 	}
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0001 0248 
; 0001 0249 	/* Reset the progress bar variables. */
; 0001 024A 	current_bar_pixel = 0u;
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0001 024B 	current_cell_load = EMPTY_LOAD;
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0001 024C 
; 0001 024D 	/* Restore the default entry mode. */
; 0001 024E 	lcd_setmode(DEFAULT_ENTRY_MODE);
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0001 024F 	/* Return home. */
; 0001 0250 	lcd_goto(LCD_1st_LINE, 0u);
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0001 0251 }
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;#endif
;
;/*!	\brief	Initialize the LCD.
; * 	\note	This library use the 4-bit interface. */
;void lcd_init(void)
; 0001 0257 {
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0001 0258 	/* GPIO initialization. */
; 0001 0259 	//Set_All_pins_as_Outputs();
; 0001 025A 	/* LCD initialization. */
; 0001 025B 	lcd_config(DEFAULT_DISPLAY_CONFIG);
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0001 025C 	lcd_setmode(DEFAULT_VIEW_MODE);
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0001 025D 	lcd_setmode(DEFAULT_ENTRY_MODE);
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0001 025E 	lcd_clrscr();
;PCODE: $0000032E VOL: 0
; 0001 025F 	lcd_return();
;PCODE: $0000032F VOL: 0
; 0001 0260 #if (USE_PROGRESS_BAR)
; 0001 0261 	lcd_initbar();
;PCODE: $00000330 VOL: 0
; 0001 0262 #endif
; 0001 0263 }
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;
;//-------------------------------
;/* END OF FILE */
;//-------------------------------

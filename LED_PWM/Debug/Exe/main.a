;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 05.07.2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;
;unsigned char counter = 0;
;unsigned int PWM_step = 0;
;unsigned char R = 0;
;unsigned char G = 32;
;unsigned char B = 64;
;unsigned char PWM96[96] ={1,2,3,4,5,6,7,8,9,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,6 ...
;                          63,66,69,72,75,78,81,84,87,90,93,96,99,96,93,90,87,84,81,78,75,72,69,66,63,60,58,56,54,52,50,4 ...
;                          46,44,42,40,38,36,34,32,30,28,26,24,22,20,18,16,14,12,10,9,8,7,6,5,4,3,2,1,0};

	.DSEG
;
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0029 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002A 	TCNT0=0xB0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002B // Place your code here
; 0000 002C     if (counter == 99) {
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002D         counter = 0;
;PCODE: $00000014 VOL: 0
; 0000 002E         PWM_step++;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002F         if (PWM_step == 30) {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0030            PWM_step = 0;
;PCODE: $0000001B VOL: 0
; 0000 0031            R++;
;PCODE: $0000001C VOL: 0
; 0000 0032            G++;
;PCODE: $0000001D VOL: 0
; 0000 0033            B++;
;PCODE: $0000001E VOL: 0
; 0000 0034            if (R == 95) {
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0035              R = 0;
;PCODE: $00000022 VOL: 0
; 0000 0036              }
; 0000 0037            if (G == 95) {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0038              G = 0;
;PCODE: $00000027 VOL: 0
; 0000 0039              }
; 0000 003A            if (B == 95) {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003B              B = 0;
;PCODE: $0000002C VOL: 0
; 0000 003C              }
; 0000 003D         }
;PCODE: $0000002D VOL: 0
; 0000 003E     }
;PCODE: $0000002E VOL: 0
; 0000 003F     else  {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0040         counter++ ;
;PCODE: $00000031 VOL: 0
; 0000 0041     };
;PCODE: $00000032 VOL: 0
; 0000 0042 
; 0000 0043 
; 0000 0044 }
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;void main(void)
; 0000 0047 {
;PCODE: $00000036 VOL: 0
; 0000 0048 // Declare your local variables here
; 0000 0049 
; 0000 004A // Input/Output Ports initialization
; 0000 004B // Port B initialization
; 0000 004C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 004D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 004E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 004F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0050 
; 0000 0051 // Port C initialization
; 0000 0052 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0053 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0054 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0055 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0056 
; 0000 0057 // Port D initialization
; 0000 0058 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0059 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 005A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 005C 
; 0000 005D // Timer/Counter 0 initialization
; 0000 005E // Clock source: System Clock
; 0000 005F // Clock value: 100,000 kHz
; 0000 0060 TCCR0=(0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0061 TCNT0=0xB0;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0062 
; 0000 0063 // Timer/Counter 1 initialization
; 0000 0064 // Clock source: System Clock
; 0000 0065 // Clock value: Timer1 Stopped
; 0000 0066 // Mode: Normal top=0xFFFF
; 0000 0067 // OC1A output: Disconnected
; 0000 0068 // OC1B output: Disconnected
; 0000 0069 // Noise Canceler: Off
; 0000 006A // Input Capture on Falling Edge
; 0000 006B // Timer1 Overflow Interrupt: Off
; 0000 006C // Input Capture Interrupt: Off
; 0000 006D // Compare A Match Interrupt: Off
; 0000 006E // Compare B Match Interrupt: Off
; 0000 006F TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0070 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0071 TCNT1H=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0072 TCNT1L=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0073 ICR1H=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0074 ICR1L=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0075 OCR1AH=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0076 OCR1AL=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0077 OCR1BH=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0078 OCR1BL=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0079 
; 0000 007A // Timer/Counter 2 initialization
; 0000 007B // Clock source: System Clock
; 0000 007C // Clock value: Timer2 Stopped
; 0000 007D // Mode: Normal top=0xFF
; 0000 007E // OC2 output: Disconnected
; 0000 007F ASSR=0<<AS2;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0080 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0081 TCNT2=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0082 OCR2=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0083 
; 0000 0084 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0085 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0086 
; 0000 0087 // External Interrupt(s) initialization
; 0000 0088 // INT0: Off
; 0000 0089 // INT1: Off
; 0000 008A MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 008B 
; 0000 008C // USART initialization
; 0000 008D // USART disabled
; 0000 008E UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 008F 
; 0000 0090 // Analog Comparator initialization
; 0000 0091 // Analog Comparator: Off
; 0000 0092 // The Analog Comparator's positive input is
; 0000 0093 // connected to the AIN0 pin
; 0000 0094 // The Analog Comparator's negative input is
; 0000 0095 // connected to the AIN1 pin
; 0000 0096 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0097 SFIOR=(0<<ACME);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0098 
; 0000 0099 // ADC initialization
; 0000 009A // ADC disabled
; 0000 009B ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 009C 
; 0000 009D // SPI initialization
; 0000 009E // SPI disabled
; 0000 009F SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00A0 
; 0000 00A1 // TWI initialization
; 0000 00A2 // TWI disabled
; 0000 00A3 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00A4 
; 0000 00A5 // Global enable interrupts
; 0000 00A6 #asm("sei")
;PCODE: $00000073 VOL: 0
	sei
;PCODE: $00000074 VOL: 0
; 0000 00A7 
; 0000 00A8 while (1)
;PCODE: $00000075 VOL: 0
; 0000 00A9       {
; 0000 00AA       // Place your code here
; 0000 00AB       if(counter == 0){
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00AC         PORTB |= (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00AD 
; 0000 00AE       }
; 0000 00AF       if(counter == PWM96[R]){
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00B0         PORTB &= ~(1<<PORTB0);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00B1       }
; 0000 00B2       if(counter == PWM96[G]){
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00B3         PORTB &= ~(1<<PORTB1);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00B4       }
; 0000 00B5       if(counter == PWM96[B]){
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00B6         PORTB &= ~(1<<PORTB2);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00B7       }
; 0000 00B8 
; 0000 00B9       }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00BA }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0

;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Калибратор проба
;Version : 0.1
;Date    : 16.07.2014
;Author  : LEW
;Company :
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 4,000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;#include <bcd.h>
;
;// Declare your global variables here
;
;unsigned char key = 0x01;
;unsigned char flstart = 0x00;
;unsigned char ind = 0x00;
;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0024 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0025 // Place your code here
; 0000 0026    if (ind > 0x63) {           // если значение переменной ind больше 99
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0027          ind = 0x00;           // обнуляем ее
;PCODE: $0000000F VOL: 0
; 0000 0028        };
;PCODE: $00000010 VOL: 0
; 0000 0029    PORTB = bin2bcd(ind);       // преобразуем в BCD формат и выводим в порт В
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002A    ++ind;                      // инкрементируем переменную  ind
;PCODE: $00000014 VOL: 0
; 0000 002B 
; 0000 002C }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;
;
;
;
;void main(void)
; 0000 0032 {
;PCODE: $00000018 VOL: 0
; 0000 0033 // Declare your local variables here
; 0000 0034 
; 0000 0035 // Crystal Oscillator division factor: 1
; 0000 0036 #pragma optsize-
; 0000 0037 CLKPR=0x80;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0038 CLKPR=0x00;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0039 #ifdef _OPTIMIZE_SIZE_
; 0000 003A #pragma optsize+
; 0000 003B #endif
; 0000 003C 
; 0000 003D // Input/Output Ports initialization
; 0000 003E 
; 0000 003F // Настройка порта В
; 0000 0040 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0041 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0042 PORTB=0x00;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0043 DDRB=0xFF;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0044 
; 0000 0045 // Настройка порта D
; 0000 0046 // Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0047 // State6=0 State5=0 State4=0 State3=T State2=T State1=T State0=T
; 0000 0048 PORTD=0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0049 DDRD=0x70;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 004A 
; 0000 004B 
; 0000 004C 
; 0000 004D // Настройка внешнего прерывания
; 0000 004E // INT0: включен
; 0000 004F // INT0 Mode: Восходящий фронт
; 0000 0050 MCUCR = (1<<ISC01)|(1<<ISC00); // установка прерывания по восходящему фронту
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0051 
; 0000 0052 
; 0000 0053 // Global enable interrupts
; 0000 0054 #asm("sei")
;PCODE: $00000027 VOL: 0
	sei
;PCODE: $00000028 VOL: 0
; 0000 0055 
; 0000 0056 PORTD.5 = 0x00;       // зажигаем индикатор готовности
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0057 PORTD.4 = 0x01;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0058 
; 0000 0059 while (1)
;PCODE: $0000002D VOL: 0
; 0000 005A    {
; 0000 005B       // Place your code here
; 0000 005C       if (~PIND.0) {                 // проверка нажатия кнопки
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 005D         key = PIND.0;                // если в течении установленной задержки
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 005E         delay_ms(10);                // сохраняется значение
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 005F         if (~PIND.0) {               // то кнопка считается нажатой
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0060             if (flstart) {           // проверяем установку флага старт
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0061                GIMSK = (0<<INT0);    // запрещаем прерывания по INT0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0062                PORTB = 0x00;         // обнуляем индикатор
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0063                ind = 0x00;
;PCODE: $00000040 VOL: 0
; 0000 0064                PORTD.5 = 0x00;       // зажигаем индикатор готовности
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0065                PORTD.4 = 0x01;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0066                flstart = 0x00;       // сбрасываем флаг старт
;PCODE: $00000045 VOL: 0
; 0000 0067             }
; 0000 0068             else {
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0069                if (~PIND.1) {        // проверяем стоит ли переключатель в положении внутр
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 006A                   GIMSK = (1<<INT0); // разрешение прерывания по INT0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 006B                   PORTD.4 = 0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 006C                }
; 0000 006D 
; 0000 006E                flstart = 0x01;       // устанавливаем флаг старт
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 006F                PORTD.5 = 0x01;       // гасим индикатор готовности
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0070             }
;PCODE: $00000054 VOL: 0
; 0000 0071           key = 0x01;                // сброс нажатия кнопки
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0072         }
; 0000 0073         do  {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0074           delay_ms(10);              // задержка с последующей проверкой
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0075         }
; 0000 0076         while (~PIND.0);              // отпускания кнопки
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0077       }
; 0000 0078     }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0079 }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0

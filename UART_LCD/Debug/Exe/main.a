;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12.09.2017
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Graphic Display functions
;#include <glcd.h>
;
;// Font used for displaying text
;// on the graphic display
;#include "font5x7ru.h"
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 90
;unsigned char gga_data[RX_BUFFER_SIZE];
;unsigned char gga_count=0;
;//unsigned char rx_wr_index=0,rx_rd_index=0;
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;unsigned char search_gga_field (unsigned char x)//Search x-th field in GGA packet
; 0000 0035 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0036     unsigned char i, c;
; 0000 0037     c=0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	x -> Y+2
;	i -> R17
;	c -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0038     for (i=0;i<gga_count;i++)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0039     {
; 0000 003A     if (gga_data[i]==',') c++;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003B     if (c==x) return i+1;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003C     }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003D     return 0;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 003E }
;PCODE: $00000037 VOL: 0
;
;void write_gps_data (unsigned char crc_valid)    //Write GPS data on LCD
; 0000 0041 {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0042     unsigned char i,temp;
; 0000 0043     if (crc_valid==0) {
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;	crc_valid -> Y+2
;	i -> R17
;	temp -> R16
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0044         //If CRC not confirm
; 0000 0045         glcd_clear();
;PCODE: $0000003F VOL: 0
; 0000 0046         glcd_outtextf("Ошибка данных");
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0047         return;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0048     }
; 0000 0049 
; 0000 004A     if (gga_data[search_gga_field(6)]=='0')
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 004B     {//If no GPS signal
; 0000 004C         glcd_clear();
;PCODE: $0000004E VOL: 0
; 0000 004D         glcd_outtextf("Нет сигнала");
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 004E 
; 0000 004F         pcd8544_wrbyte(gga_data[search_gga_field(7)+1]);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0050         glcd_outtextxyf(15,8," Спутников ");
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0051         glcd_outtextxyf(10,15,"обнаружено");
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0052         return;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0053     }
; 0000 0054     //Write Latitude and Longitude
; 0000 0055     glcd_clear();
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0056     glcd_outtextf("Широта:");
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0057     glcd_moveto(0,8);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0058     temp=search_gga_field(2);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0059     for (i=temp;i<temp+9;i++)//Write Latitude
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 005A     {
; 0000 005B          if ((i-temp)==2) glcd_putchar (0xB0);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 005C          glcd_putchar (gga_data[i]);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 005D     }
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 005E     glcd_putchar (gga_data[search_gga_field(3)]);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 005F 
; 0000 0060     glcd_outtextxyf(0,15,"Долгота:");
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0061     glcd_moveto(0,23);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0062     temp=search_gga_field(4);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0063     for (i=temp;i<temp+10;i++)    //Write Longitude
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0064     {
; 0000 0065          if ((i-temp)==3) glcd_putchar (0xB0);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0066          glcd_putchar (gga_data[i]);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0067     }
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0068     glcd_putchar (gga_data[search_gga_field(5)]);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0069 
; 0000 006A     glcd_outtextxyf(0,32,"H:");
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 006B     temp=search_gga_field(9);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 006C     while (gga_data[temp]!=',')	//Write altitude
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 006D     {
; 0000 006E          glcd_putchar(gga_data[temp]);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 006F          temp++;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0070     }
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0071     glcd_putchar('м');
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0072 
; 0000 0073     glcd_outtextf(" Sat:");
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0074     temp=search_gga_field(7);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0075     glcd_putchar (gga_data[temp]);	//Write satellites
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0076     if (gga_data[temp+1]!=',') glcd_putchar (gga_data[temp+1]);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0077 
; 0000 0078     glcd_outtextxyf(0,41,"UTC:");
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0079     temp=search_gga_field(1);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 007A     for (i=temp;i<temp+6;i++)	//Write UTC
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 007B     {
; 0000 007C          if (((i-temp)==2)||((i-temp)==4) ) glcd_putchar (':');
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 007D          glcd_putchar (gga_data[i]);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 007E     }
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 007F 
; 0000 0080 
; 0000 0081 
; 0000 0082     return;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0083 }
;PCODE: $0000013E VOL: 0
;
;unsigned char check_crc (void)		//Check CRC16
; 0000 0086 { /*unsigned char i,gga_crc,vtg_crc;
; 0000 0087 
; 0000 0088      gga_crc=0x00;
; 0000 0089 
; 0000 008A      i=1;
; 0000 008B      while ((gga_data[i]!='*')&&(i<90))
; 0000 008C       {
; 0000 008D        gga_crc^=gga_data[i];
; 0000 008E        i++;
; 0000 008F       }
; 0000 0090      i++;
; 0000 0091      if (gga_data[i]!=(0x30+(gga_crc>>4))) return 0;
; 0000 0092      i++;
; 0000 0093      if (gga_data[i]!=(0x30+(gga_crc&0x0f))) return 0;
; 0000 0094 
; 0000 0095      vtg_crc=0x00;
; 0000 0096 
; 0000 0097      i=1;
; 0000 0098      while ((vtg_data[i]!='*')&&(i<90))
; 0000 0099       {
; 0000 009A        vtg_crc^=vtg_data[i];
; 0000 009B        i++;
; 0000 009C       }
; 0000 009D      i++;
; 0000 009E      if (vtg_data[i]!=(0x30+(vtg_crc>>4))) return 0;
; 0000 009F      i++;
; 0000 00A0      if (vtg_data[i]!=(0x30+(vtg_crc&0x0f))) return 0; */
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00A1 
; 0000 00A2      return 1;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00A3 }
;PCODE: $00000143 VOL: 0
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 00A7 {
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00A8 char status;
; 0000 00A9 status=UCSRA;
;PCODE: $00000146 VOL: 0
;	status -> R17
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00AA if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00AB    {
; 0000 00AC         gga_count=0;
;PCODE: $0000014C VOL: 0
; 0000 00AD         gga_data[gga_count]=UDR;//Get first byte to GGA packet
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00AE         gga_count++;
;PCODE: $00000152 VOL: 0
; 0000 00AF         do {			//Receive GGA packet
;PCODE: $00000153 VOL: 0
; 0000 00B0 
; 0000 00B1             while ( !(UCSRA & (1<<RXC)) );
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00B2             gga_data[gga_count]=UDR;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00B3 	        gga_count++;
;PCODE: $0000015F VOL: 0
; 0000 00B4 
; 0000 00B5         } while ((gga_data[gga_count-1]!=0x0a)&&(gga_count<90));
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00B6 
; 0000 00B7    if (gga_count == RX_BUFFER_SIZE) gga_count=0;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00B8    }
;PCODE: $00000175 VOL: 0
; 0000 00B9    write_gps_data(check_crc());	//Write data and check CRC16
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00BA    return;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00BB }
;PCODE: $0000017D VOL: 0
;
;//#ifndef _DEBUG_TERMINAL_IO_
;//// Get a character from the USART Receiver buffer
;//#define _ALTERNATE_GETCHAR_
;//#pragma used+
;//char getchar(void)
;//{
;//char data;
;//while (rx_counter==0);
;//data=rx_buffer[rx_rd_index++];
;//#if RX_BUFFER_SIZE != 256
;//if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;//#endif
;//#asm("cli")
;//--rx_counter;
;//#asm("sei")
;//return data;
;//}
;//#pragma used-
;//#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;unsigned char tx_rd_index=0;
;unsigned char tx_counter=0;
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 00D9 {
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00DA if (tx_counter)
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00DB    {
; 0000 00DC    --tx_counter;
;PCODE: $00000182 VOL: 0
; 0000 00DD    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00DE #if TX_BUFFER_SIZE != 256
; 0000 00DF    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00E0 #endif
; 0000 00E1    }
;PCODE: $0000018D VOL: 0
; 0000 00E2 }
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;
;//#ifndef _DEBUG_TERMINAL_IO_
;//// Write a character to the USART Transmitter buffer
;//#define _ALTERNATE_PUTCHAR_
;//#pragma used+
;//void putchar(char c)
;//{
;//while (tx_counter == TX_BUFFER_SIZE);
;//#asm("cli")
;//if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;//   {
;//   tx_buffer[tx_wr_index++]=c;
;//#if TX_BUFFER_SIZE != 256
;//   if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;//#endif
;//   ++tx_counter;
;//   }
;//else
;//   UDR=c;
;//#asm("sei")
;//}
;//#pragma used-
;//#endif
;
;
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;void main(void)
; 0000 0101 {
;PCODE: $00000192 VOL: 0
; 0000 0102 // Declare your local variables here
; 0000 0103 // Variable used to store graphic display
; 0000 0104 // controller initialization data
; 0000 0105 GLCDINIT_t glcd_init_data;
; 0000 0106 
; 0000 0107 // Input/Output Ports initialization
; 0000 0108 // Port B initialization
; 0000 0109 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 010A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000193 VOL: 0
;	glcd_init_data -> Y+0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 010B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 010C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 010D 
; 0000 010E // Port C initialization
; 0000 010F // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0110 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0111 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0112 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 0113 
; 0000 0114 // Port D initialization
; 0000 0115 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0116 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 0117 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0118 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0119 
; 0000 011A // Timer/Counter 0 initialization
; 0000 011B // Clock source: System Clock
; 0000 011C // Clock value: Timer 0 Stopped
; 0000 011D TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 011E TCNT0=0x00;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 011F 
; 0000 0120 // Timer/Counter 1 initialization
; 0000 0121 // Clock source: System Clock
; 0000 0122 // Clock value: Timer1 Stopped
; 0000 0123 // Mode: Normal top=0xFFFF
; 0000 0124 // OC1A output: Disconnected
; 0000 0125 // OC1B output: Disconnected
; 0000 0126 // Noise Canceler: Off
; 0000 0127 // Input Capture on Falling Edge
; 0000 0128 // Timer1 Overflow Interrupt: Off
; 0000 0129 // Input Capture Interrupt: Off
; 0000 012A // Compare A Match Interrupt: Off
; 0000 012B // Compare B Match Interrupt: Off
; 0000 012C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 012D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 012E TCNT1H=0x00;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 012F TCNT1L=0x00;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0130 ICR1H=0x00;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0131 ICR1L=0x00;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0132 OCR1AH=0x00;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 0133 OCR1AL=0x00;
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 0134 OCR1BH=0x00;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0135 OCR1BL=0x00;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0136 
; 0000 0137 // Timer/Counter 2 initialization
; 0000 0138 // Clock source: System Clock
; 0000 0139 // Clock value: Timer2 Stopped
; 0000 013A // Mode: Normal top=0xFF
; 0000 013B // OC2 output: Disconnected
; 0000 013C ASSR=0<<AS2;
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 013D TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 013E TCNT2=0x00;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 013F OCR2=0x00;
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0140 
; 0000 0141 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0142 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 0143 
; 0000 0144 // External Interrupt(s) initialization
; 0000 0145 // INT0: Off
; 0000 0146 // INT1: Off
; 0000 0147 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0148 
; 0000 0149 // USART initialization
; 0000 014A // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 014B // USART Receiver: On
; 0000 014C // USART Transmitter: On
; 0000 014D // USART Mode: Asynchronous
; 0000 014E // USART Baud Rate: 9600
; 0000 014F UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0150 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0151 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0152 UBRRH=0x00;
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0153 UBRRL=0x67;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0154 
; 0000 0155 // Analog Comparator initialization
; 0000 0156 // Analog Comparator: Off
; 0000 0157 // The Analog Comparator's positive input is
; 0000 0158 // connected to the AIN0 pin
; 0000 0159 // The Analog Comparator's negative input is
; 0000 015A // connected to the AIN1 pin
; 0000 015B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 015C SFIOR=(0<<ACME);
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 015D 
; 0000 015E // ADC initialization
; 0000 015F // ADC disabled
; 0000 0160 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0161 
; 0000 0162 // SPI initialization
; 0000 0163 // SPI disabled
; 0000 0164 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0165 
; 0000 0166 // TWI initialization
; 0000 0167 // TWI disabled
; 0000 0168 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0169 
; 0000 016A // Graphic Display Controller initialization
; 0000 016B // The PCD8544 connections are specified in the
; 0000 016C // Project|Configure|C Compiler|Libraries|Graphic Display menu:
; 0000 016D // SDIN - PORTC Bit 0
; 0000 016E // SCLK - PORTC Bit 1
; 0000 016F // D /C - PORTC Bit 2
; 0000 0170 // /SCE - PORTC Bit 3
; 0000 0171 // /RES - PORTC Bit 4
; 0000 0172 
; 0000 0173 // Specify the current font for displaying text
; 0000 0174 glcd_init_data.font=font5x7ru;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0175 // No function is used for reading
; 0000 0176 // image data from external memory
; 0000 0177 glcd_init_data.readxmem=NULL;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0178 // No function is used for writing
; 0000 0179 // image data to external memory
; 0000 017A glcd_init_data.writexmem=NULL;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 017B // Set the LCD temperature coefficient
; 0000 017C glcd_init_data.temp_coef=PCD8544_DEFAULT_TEMP_COEF;
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 017D // Set the LCD bias
; 0000 017E glcd_init_data.bias=PCD8544_DEFAULT_BIAS;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 017F // Set the LCD contrast control voltage VLCD
; 0000 0180 glcd_init_data.vlcd=PCD8544_DEFAULT_VLCD;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0181 
; 0000 0182 glcd_init(&glcd_init_data);
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0183 
; 0000 0184 // Global enable interrupts
; 0000 0185 #asm("sei")
;PCODE: $000001EC VOL: 0
	sei
;PCODE: $000001ED VOL: 0
; 0000 0186 
; 0000 0187 while (1)
;PCODE: $000001EE VOL: 0
; 0000 0188       {
; 0000 0189       // Place your code here
; 0000 018A 
; 0000 018B       }
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 018C }
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0

;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10.04.2016
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;
;//Тайминги
;#define F_CPU 16000000
;#define Timer_WholeLine	F_CPU/15625		         //One PAL line 64us
;#define Timer_HalfLine	Timer_WholeLine/2	     //Half PAL line = 32us
;#define Timer_ShortSync (Timer_WholeLine/32)+5	 //2,35us
;#define Timer_LongSync	(Timer_ShortSync*15)-6	 //29,65us
;#define Timer_NormalSync (Timer_WholeLine/16)+11 //4,7us
;#define Timer_MidSync (Timer_WholeLine*15/32)-43 //27.3us
;
;#define Sync OCR1B
;
;// Declare your global variables here
;
;
;volatile unsigned int synccount;	//  счетчик импульсов синхронизации
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 002E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002F // Place your code here
; 0000 0030 
; 0000 0031 }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;// Timer1 output compare B interrupt service routine
;interrupt [TIM1_COMPB] void timer1_compb_isr(void)
; 0000 0035 {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0036 // Place your code here
; 0000 0037 
; 0000 0038 switch (synccount)
;PCODE: $00000014 VOL: 1
; 0000 0039 	{
; 0000 003A 	case 5://++++++++++++++++++++++++++++++++++++++++++++++++++++++++=
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 003B 
; 0000 003C 			Sync = Timer_ShortSync;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 003D 			synccount++;
;PCODE: $00000019 VOL: 1
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 003E 	break;
;PCODE: $0000001D VOL: 0
; 0000 003F 	case 9://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0040 			OCR1A = Timer_WholeLine-1;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0041 			Sync = Timer_NormalSync;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0042 			synccount++;
;PCODE: $00000025 VOL: 1
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0043 	break;
;PCODE: $00000029 VOL: 0
; 0000 0044 	case 314://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0045 			OCR1A = Timer_HalfLine;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0046 			Sync = Timer_ShortSync;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0047 			synccount++;
;PCODE: $00000031 VOL: 1
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0048 	break;
;PCODE: $00000035 VOL: 0
; 0000 0049 	case 320://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 004A 			Sync = Timer_MidSync;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 004B 			synccount++;
;PCODE: $0000003B VOL: 1
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004C 	break;
;PCODE: $0000003F VOL: 0
; 0000 004D 	case 325://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 004E 			Sync = Timer_ShortSync;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004F 			synccount++;
;PCODE: $00000045 VOL: 1
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0050 	break;
;PCODE: $00000049 VOL: 0
; 0000 0051 	case 330://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0052 			OCR1A = Timer_WholeLine-1;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0053 			Sync = Timer_NormalSync;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0054 			synccount++;
;PCODE: $00000051 VOL: 1
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0055 	break;
;PCODE: $00000055 VOL: 0
; 0000 0056 	case 635://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0057 		    OCR1A = Timer_HalfLine;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0058 		    Sync = Timer_ShortSync;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0059 		    synccount++;
;PCODE: $0000005D VOL: 1
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 005A 	break;
;PCODE: $00000061 VOL: 0
; 0000 005B 	case 640://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 005C 		    Sync = Timer_MidSync;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 005D 		    synccount=1;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 1
; 0000 005E 	break;
;PCODE: $00000069 VOL: 0
; 0000 005F 
; 0000 0060 	default://++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;PCODE: $0000006A VOL: 0
; 0000 0061 	synccount++;
;PCODE: $0000006B VOL: 1
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0062   }
;PCODE: $0000006F VOL: 0
; 0000 0063 }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;
;void main(void)
; 0000 0066 {
;PCODE: $00000073 VOL: 0
; 0000 0067 // Declare your local variables here
; 0000 0068 
; 0000 0069 // Input/Output Ports initialization
; 0000 006A // Port B initialization
; 0000 006B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=In Bit0=In
; 0000 006C DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 006D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=T Bit0=T
; 0000 006E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 006F 
; 0000 0070 // Port C initialization
; 0000 0071 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0072 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0073 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0074 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0075 
; 0000 0076 // Port D initialization
; 0000 0077 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0078 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0079 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=P Bit1=T Bit0=T
; 0000 007A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 007B 
; 0000 007C // Timer/Counter 0 initialization
; 0000 007D // Clock source: System Clock
; 0000 007E // Clock value: Timer 0 Stopped
; 0000 007F TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0080 TCNT0=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0081 
; 0000 0082 // Timer/Counter 1 initialization
; 0000 0083 // Clock source: System Clock
; 0000 0084 // Clock value: 16000,000 kHz
; 0000 0085 // Mode: Fast PWM top=OCR1A
; 0000 0086 // OC1A output: Disconnected
; 0000 0087 // OC1B output: Inverted PWM
; 0000 0088 // Noise Canceler: Off
; 0000 0089 // Input Capture on Falling Edge
; 0000 008A // Timer Period: 0,0625 us
; 0000 008B // Output Pulse(s):
; 0000 008C // OC1B Period: 0,0625 us
; 0000 008D // Timer1 Overflow Interrupt: Off
; 0000 008E // Input Capture Interrupt: Off
; 0000 008F // Compare A Match Interrupt: Off
; 0000 0090 // Compare B Match Interrupt: On
; 0000 0091 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (1<<COM1B0) | (1<<WGM11) | (1<<WGM10);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0092 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0093 TCNT1H=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0094 TCNT1L=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0095 ICR1H=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0096 ICR1L=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0097 OCR1AH=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0098 OCR1AL=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0099 OCR1BH=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 009A OCR1BL=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 009B 
; 0000 009C // Timer/Counter 2 initialization
; 0000 009D // Clock source: System Clock
; 0000 009E // Clock value: Timer2 Stopped
; 0000 009F // Mode: Normal top=0xFF
; 0000 00A0 // OC2 output: Disconnected
; 0000 00A1 ASSR=0<<AS2;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00A2 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00A3 TCNT2=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00A4 OCR2=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00A5 
; 0000 00A6 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00A7 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (1<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00A8 
; 0000 00A9 // External Interrupt(s) initialization
; 0000 00AA // INT0: On
; 0000 00AB // INT0 Mode: Rising Edge
; 0000 00AC // INT1: Off
; 0000 00AD GICR|=(0<<INT1) | (1<<INT0);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00AE MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00AF GIFR=(0<<INTF1) | (1<<INTF0);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00B0 
; 0000 00B1 // USART initialization
; 0000 00B2 // USART disabled
; 0000 00B3 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00B4 
; 0000 00B5 // Analog Comparator initialization
; 0000 00B6 // Analog Comparator: Off
; 0000 00B7 // The Analog Comparator's positive input is
; 0000 00B8 // connected to the AIN0 pin
; 0000 00B9 // The Analog Comparator's negative input is
; 0000 00BA // connected to the AIN1 pin
; 0000 00BB ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00BC SFIOR=(0<<ACME);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00BD 
; 0000 00BE // ADC initialization
; 0000 00BF // ADC disabled
; 0000 00C0 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00C1 
; 0000 00C2 // SPI initialization
; 0000 00C3 // SPI disabled
; 0000 00C4 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00C5 
; 0000 00C6 // TWI initialization
; 0000 00C7 // TWI disabled
; 0000 00C8 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00C9 
; 0000 00CA // Initialize Sync for PAL
; 0000 00CB synccount = 1;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 1
; 0000 00CC Sync = Timer_MidSync;     	//Начинаем с двух прерываний на строку.
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00CD OCR1A = Timer_HalfLine;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00CE 
; 0000 00CF // Global enable interrupts
; 0000 00D0 #asm("sei")
;PCODE: $000000BB VOL: 0
	sei
;PCODE: $000000BC VOL: 0
; 0000 00D1 
; 0000 00D2 while (1)
;PCODE: $000000BD VOL: 0
; 0000 00D3       {
; 0000 00D4       // Place your code here
; 0000 00D5 
; 0000 00D6       }
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00D7 }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0

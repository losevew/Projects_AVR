;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12.09.2017
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Graphic Display functions
;#include <glcd.h>
;
;// Font used for displaying text
;// on the graphic display
;#include "font5x7ru.h"
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;unsigned char FRT = 0;                //флаг повтора передачи
;unsigned char FOD = 0;                //флаг отображения информации
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;unsigned char rx_data[RX_BUFFER_SIZE];
;unsigned char rx_count=0;
;//unsigned char rx_wr_index=0,rx_rd_index=0;
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;unsigned char tx_rd_index=0;
;unsigned char tx_counter=0;
;unsigned char tx_wr_index=0;
;
;// This flag is set on USART Receiver buffer overflow
;//bit rx_buffer_overflow;
;
;
;void LCD_Out (void)
; 0001 003E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 003F      unsigned char i;
; 0001 0040      glcd_clear();
;PCODE: $0000000F VOL: 0
;	i -> R17
;PCODE: $00000010 VOL: 0
; 0001 0041      glcd_outtextf("Проверка USART");
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0001 0042      glcd_outtextf("Принято: ");
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 0043      //glcd_outtext(str);
; 0001 0044      for (i = 0; i < RX_BUFFER_SIZE; i++)
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0001 0045             {
; 0001 0046                 glcd_putchar (rx_data[i]);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 0047             }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0001 0048      FOD = 0;
;PCODE: $0000002A VOL: 0
; 0001 0049 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;
;
;
;void USART_Transmit(char c)
; 0001 004E {
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 004F while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $00000030 VOL: 0
;	c -> Y+0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0001 0050 #asm("cli")
;PCODE: $00000037 VOL: 0
	cli
;PCODE: $00000038 VOL: 0
; 0001 0051 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 0052    {
; 0001 0053    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0001 0054 #if TX_BUFFER_SIZE != 256
; 0001 0055    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0001 0056 #endif
; 0001 0057    ++tx_counter;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 0058    }
; 0001 0059 else
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 005A    UDR=c;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0001 005B #asm("sei")
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
	sei
;PCODE: $00000052 VOL: 0
; 0001 005C }
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;
;void UART_send_st (const unsigned char *st)
; 0001 005F {
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 0060    while(*st)
;PCODE: $00000058 VOL: 0
;	*st -> Y+0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 0061       USART_Transmit(*st++);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0001 0062 }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;
;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0001 0068 {
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 0069 
; 0001 006A if ((UCSRA & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 006B    {
; 0001 006C         rx_count=0;
;PCODE: $0000006D VOL: 0
; 0001 006D //        rx_data[rx_count]=UDR;//Get first byte
; 0001 006E //        rx_count++;
; 0001 006F         do {			//Receive  packet
;PCODE: $0000006E VOL: 0
; 0001 0070 
; 0001 0071             while ( !(UCSRA & RX_COMPLETE) );
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0001 0072             rx_data[rx_count]=UDR;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0001 0073 	        rx_count++;
;PCODE: $0000007A VOL: 0
; 0001 0074 
; 0001 0075         } while (rx_count<RX_BUFFER_SIZE);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 0076 
; 0001 0077    if (rx_count == RX_BUFFER_SIZE) rx_count=0;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0001 0078    }
;PCODE: $00000085 VOL: 0
; 0001 0079 
; 0001 007A    FOD=1;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0001 007B    return;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0001 007C }
;PCODE: $0000008B VOL: 0
;
;
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0001 0082 {
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 0083 if (tx_counter)
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0001 0084    {
; 0001 0085    --tx_counter;
;PCODE: $00000090 VOL: 0
; 0001 0086    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 0087 #if TX_BUFFER_SIZE != 256
; 0001 0088    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0001 0089 #endif
; 0001 008A    }
;PCODE: $0000009B VOL: 0
; 0001 008B }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;
;
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;void main(void)
; 0001 0093 {
;PCODE: $000000A0 VOL: 0
; 0001 0094 // Declare your local variables here
; 0001 0095 // Variable used to store graphic display
; 0001 0096 // controller initialization data
; 0001 0097 GLCDINIT_t glcd_init_data;
; 0001 0098 
; 0001 0099 // Input/Output Ports initialization
; 0001 009A // Port B initialization
; 0001 009B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 009C DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000000A1 VOL: 0
;	glcd_init_data -> Y+0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0001 009D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 009E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0001 009F 
; 0001 00A0 // Port C initialization
; 0001 00A1 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 00A2 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0001 00A3 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 00A4 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0001 00A5 
; 0001 00A6 // Port D initialization
; 0001 00A7 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 00A8 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0001 00A9 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 00AA PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0001 00AB 
; 0001 00AC // Timer/Counter 0 initialization
; 0001 00AD // Clock source: System Clock
; 0001 00AE // Clock value: Timer 0 Stopped
; 0001 00AF TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0001 00B0 TCNT0=0x00;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0001 00B1 
; 0001 00B2 // Timer/Counter 1 initialization
; 0001 00B3 // Clock source: System Clock
; 0001 00B4 // Clock value: Timer1 Stopped
; 0001 00B5 // Mode: Normal top=0xFFFF
; 0001 00B6 // OC1A output: Disconnected
; 0001 00B7 // OC1B output: Disconnected
; 0001 00B8 // Noise Canceler: Off
; 0001 00B9 // Input Capture on Falling Edge
; 0001 00BA // Timer1 Overflow Interrupt: Off
; 0001 00BB // Input Capture Interrupt: Off
; 0001 00BC // Compare A Match Interrupt: Off
; 0001 00BD // Compare B Match Interrupt: Off
; 0001 00BE TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0001 00BF TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0001 00C0 TCNT1H=0x00;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0001 00C1 TCNT1L=0x00;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0001 00C2 ICR1H=0x00;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0001 00C3 ICR1L=0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0001 00C4 OCR1AH=0x00;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0001 00C5 OCR1AL=0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0001 00C6 OCR1BH=0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0001 00C7 OCR1BL=0x00;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0001 00C8 
; 0001 00C9 // Timer/Counter 2 initialization
; 0001 00CA // Clock source: System Clock
; 0001 00CB // Clock value: Timer2 Stopped
; 0001 00CC // Mode: Normal top=0xFF
; 0001 00CD // OC2 output: Disconnected
; 0001 00CE ASSR=0<<AS2;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0001 00CF TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0001 00D0 TCNT2=0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0001 00D1 OCR2=0x00;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0001 00D2 
; 0001 00D3 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0001 00D4 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0001 00D5 
; 0001 00D6 // External Interrupt(s) initialization
; 0001 00D7 // INT0: Off
; 0001 00D8 // INT1: Off
; 0001 00D9 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0001 00DA 
; 0001 00DB // USART initialization
; 0001 00DC // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0001 00DD // USART Receiver: On
; 0001 00DE // USART Transmitter: On
; 0001 00DF // USART Mode: Asynchronous
; 0001 00E0 // USART Baud Rate: 9600
; 0001 00E1 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0001 00E2 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0001 00E3 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0001 00E4 UBRRH=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0001 00E5 UBRRL=0x33;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0001 00E6 
; 0001 00E7 // Analog Comparator initialization
; 0001 00E8 // Analog Comparator: Off
; 0001 00E9 // The Analog Comparator's positive input is
; 0001 00EA // connected to the AIN0 pin
; 0001 00EB // The Analog Comparator's negative input is
; 0001 00EC // connected to the AIN1 pin
; 0001 00ED ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0001 00EE SFIOR=(0<<ACME);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0001 00EF 
; 0001 00F0 // ADC initialization
; 0001 00F1 // ADC disabled
; 0001 00F2 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0001 00F3 
; 0001 00F4 // SPI initialization
; 0001 00F5 // SPI disabled
; 0001 00F6 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0001 00F7 
; 0001 00F8 // TWI initialization
; 0001 00F9 // TWI disabled
; 0001 00FA TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0001 00FB 
; 0001 00FC // Graphic Display Controller initialization
; 0001 00FD // The PCD8544 connections are specified in the
; 0001 00FE // Project|Configure|C Compiler|Libraries|Graphic Display menu:
; 0001 00FF // SDIN - PORTC Bit 0
; 0001 0100 // SCLK - PORTC Bit 1
; 0001 0101 // D /C - PORTC Bit 2
; 0001 0102 // /SCE - PORTC Bit 3
; 0001 0103 // /RES - PORTC Bit 4
; 0001 0104 
; 0001 0105 // Specify the current font for displaying text
; 0001 0106 glcd_init_data.font=font5x7ru;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0001 0107 // No function is used for reading
; 0001 0108 // image data from external memory
; 0001 0109 glcd_init_data.readxmem=NULL;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0001 010A // No function is used for writing
; 0001 010B // image data to external memory
; 0001 010C glcd_init_data.writexmem=NULL;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0001 010D // Set the LCD temperature coefficient
; 0001 010E glcd_init_data.temp_coef=PCD8544_DEFAULT_TEMP_COEF;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0001 010F // Set the LCD bias
; 0001 0110 glcd_init_data.bias=PCD8544_DEFAULT_BIAS;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0001 0111 // Set the LCD contrast control voltage VLCD
; 0001 0112 glcd_init_data.vlcd=PCD8544_DEFAULT_VLCD;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0001 0113 
; 0001 0114 glcd_init(&glcd_init_data);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0001 0115 
; 0001 0116 glcd_clear();
;PCODE: $000000FA VOL: 0
; 0001 0117 glcd_outtextf("Проверка USART");
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0001 0118 
; 0001 0119 // Global enable interrupts
; 0001 011A #asm("sei")
;PCODE: $000000FE VOL: 0
	sei
;PCODE: $000000FF VOL: 0
; 0001 011B 
; 0001 011C while (1)
;PCODE: $00000100 VOL: 0
; 0001 011D       {
; 0001 011E       // Place your code here
; 0001 011F       if(PINB.0!=1)
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0001 0120         {
; 0001 0121             if (FRT == 0)
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0001 0122             {
; 0001 0123                 USART_Transmit('U');
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0001 0124                 USART_Transmit('S');
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0001 0125                 USART_Transmit('A');
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0001 0126                 USART_Transmit('R');
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0001 0127                 USART_Transmit('T');
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0001 0128                 USART_Transmit(13);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0001 0129                 UART_send_st("Hello, World!\n");
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0001 012A                 USART_Transmit(13);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0001 012B                 FRT = 1;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0001 012C             }
; 0001 012D         }
;PCODE: $00000119 VOL: 0
; 0001 012E         else
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0001 012F         {
; 0001 0130             FRT = 0;
;PCODE: $0000011C VOL: 0
; 0001 0131         }
;PCODE: $0000011D VOL: 0
; 0001 0132         if (FOD==1)
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0001 0133         {
; 0001 0134             LCD_Out();
;PCODE: $00000121 VOL: 0
; 0001 0135         }
; 0001 0136 
; 0001 0137 
; 0001 0138       }
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0001 0139 }
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0

	.DSEG
_0x20020:
	.BYTE 0xF
